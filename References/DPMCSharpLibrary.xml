<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalProduction</name>
    </assembly>
    <members>
        <member name="T:DigitalProduction.Algorithms.Algorithms">
            <summary>
            A collection of general purpose algorithms.
            </summary>
        </member>
        <member name="M:DigitalProduction.Algorithms.Algorithms.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Algorithms.Algorithms.Shuffle(System.Collections.ArrayList@)">
            <summary>
            Randomize an array list.  Uses .Net framework "Random" object to generate random numbers.
            Written May 2004.
            </summary>
            <param name="list">Array to be shuffled.</param>
        </member>
        <member name="T:DigitalProduction.ComponentModel.AliasAttribute">
            <summary>
            Attribute for applying alternate names to a class.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.AliasAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.AliasAttribute.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.ComponentModel.AliasAttribute.Alias">
            <summary>
            An alternate name for the class/structure.
            </summary>
        </member>
        <member name="T:DigitalProduction.ComponentModel.RevertibleList`1">
            <summary>
            Provides and interface for an list of objects that are revertible.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.RevertibleList`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.RevertibleList`1.BeginEdit">
            <summary>
            Beginning of the edit.  Current state should be saved.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.RevertibleList`1.RejectChanges">
            <summary>
            Reject the changes made since the last BeginEdit.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.RevertibleList`1.AcceptChanges">
            <summary>
            Accept (commit) the changes made since the last BeginEdit.
            </summary>
        </member>
        <member name="T:DigitalProduction.ComponentModel.IRevertible">
            <summary>
            Provides and interface for an object that is revertible.  The object can save its current state and after changes are made to it, either keep
            the changes or revert to the saved state.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.IRevertible.BeginEdit">
            <summary>
            Beginning of the edit.  Current state should be saved.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.IRevertible.RejectChanges">
            <summary>
            Reject the changes made since the last BeginEdit.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.IRevertible.AcceptChanges">
            <summary>
            Accept (commit) the changes made since the last BeginEdit.
            </summary>
        </member>
        <member name="T:DigitalProduction.Delegates.CallBack">
            <summary>
            General call back delegate.  Can be used to update the progress bar, close the form, et cetera via a call back function from another thread.
            </summary>
        </member>
        <member name="T:DigitalProduction.Delegates.DisplayMessageDelegate">
            <summary>
            Delegate for a message callback function.
            </summary>
            <param name="message">Text to display in the message box.</param>
            <param name="caption">Text to display in the title bar of the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessagBoxIcon that specifies which icon to display in the message box.</param>
        </member>
        <member name="T:DigitalProduction.Delegates.InstallEventHandler">
            <summary>
            Delegate template for install functions.
            </summary>
        </member>
        <member name="T:DigitalProduction.Delegates.NoArgumentsEventHandler">
            <summary>
            A generic delegate for events that do not have arguments.
            </summary>
        </member>
        <member name="T:DigitalProduction.Delegates.UpdateProgressCallBack">
            <summary>
            Update the progress bar via a call back function from another thread.
            </summary>
            <param name="value">Value of the progress bar as an integer from 0-100.</param>
        </member>
        <member name="T:DigitalProduction.Delegates.UpdateCaptionCallBack">
            <summary>
            Update the text (caption) on the form.
            </summary>
            <param name="caption">Text to display.</param>
        </member>
        <member name="T:DigitalProduction.Delegates.ValidateEventHandler">
            <summary>
            A generic delegate for validating events.
            </summary>
            <param name="cancelEventArgs">Cancel event arguments.</param>
        </member>
        <member name="T:DigitalProduction.Extensions.ListExtensions">
            <summary>
            Statistical extensions for a list.
            Based upon: http://www.martijnkooij.nl/2013/04/csharp-math-mean-variance-and-standard-deviation/
            </summary>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Average(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Get the mean (average) of a subset of list entries.
            </summary>
            <param name="values">List to calculate the mean (average) from.</param>
            <param name="start">Index to start from.</param>
            <param name="count">Number of entries to take the mean (average) of.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.RemoveAverage(System.Collections.Generic.List{System.Double})">
            <summary>
            Removes the mean (subtracts) from a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.RemoveAverage(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Removes the mean (subtracts) from a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to remove the mean (average) of.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.RemoveAverageInPlace(System.Collections.Generic.List{System.Double})">
            <summary>
            Removes the mean (subtracts) from a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.RemoveAverageInPlace(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Removes the mean (subtracts) from a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to remove the mean (average) of.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Variance(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculates the variance of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Variance(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Calculates the variance of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="mean">The mean (average) value of the entries.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Variance(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the variance of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="mean">The mean (average) value of the entries.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.StandardDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculates the standard deviation of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.StandardDeviation(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Calculates the standard deviation of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.MovingAverage(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Calculates a moving average.  This is a "backward" moving average.  A data point in the moving average is the
            average of the previous "windowLength" points from the input data.  This is different from a "central" or
            "forward" moving average.
            </summary>
            <param name="values">Values to average.</param>
            <param name="windowLength">Window size for the average.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.SegmentAverage(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Calculate the average for each segment.
            </summary>
            <param name="values">Values to take average of.</param>
            <param name="segmentIndices">Indices of the segments.</param>
            <param name="forPlotting">If true, the additional values are added (values are added twice) so that a continuous line can be plotted.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Add(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Addition of a scalar with a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="scalar">Value to add to the list entries.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Add(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Addition of a scalar with a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="scalar">Value to add to the list entries.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Add(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Addition of two lists of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to add to the list entries.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Add(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Addition of a subset of two list of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to add to the list entries.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.AddInPlace(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Fast version of addition by a scalar.  Does addition of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to add to the values of.  Values in list are overwritten.</param>
            <param name="scalar">Scalar to add.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.AddInPlace(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Fast version of addition by a scalar.  Does addition of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to add to the values of.  Values in list are overwritten.</param>
            <param name="scalar">Scalar to add.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.AddInPlace(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Addition of two lists of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to add to the list entries.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.AddInPlace(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Addition of a subset of two list of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to add to the list entries.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Subtract(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Subtraction of a scalar with a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="scalar">Value to subtract from the list entries.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Subtract(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Subtraction of a scalar with a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="scalar">Value to subtract from the list entries.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Subtract(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Addition of two lists of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to add to the list entries.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Subtract(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Addition of a subset of two list of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to add to the list entries.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.SubtractInPlace(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Fast version of subtraction by a scalar.  Does subtract from values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to subtract from the values.  Values in list are overwritten.</param>
            <param name="scalar">Scalar to subtract.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.SubtractInPlace(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Fast version of subtract by a scalar.  Does subtract from values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to subtract from the values of.  Values in list are overwritten.</param>
            <param name="scalar">Scalar to subtract.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.SubtractInPlace(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Addition of two lists of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to add to the list entries.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.SubtractInPlace(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Addition of a subset of two list of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to add to the list entries.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Multiply(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Multiplication of a scalar with a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="scalar">Value to multiply the list entries by.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Multiply(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Multiplication of a scalar with a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="scalar">Value to multiply the list entries by.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Multiply(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Entry wise multiplication of two lists of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to multiply the list entries by.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Multiply(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Entry wise multiplication of two lists of doubles.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to multiply the list entries by.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.MultiplyInPlace(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Fast version of multiply by a scalar.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to multiple the values of.  Values in list are overwritten.</param>
            <param name="scalar">Scalar to multiply by.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.MultiplyInPlace(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Fast version of multiply by a scalar.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to multiple the values of.  Values in list are overwritten.</param>
            <param name="scalar">Scalar to multiply by.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.MultiplyInPlace(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Entry wise multiplication of two lists of doubles.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to multiply the list entries by.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.MultiplyInPlace(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Entry wise multiplication of two lists of doubles.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="leftValues">Values for calculation (this list).</param>
            <param name="rightValues">Values to multiply the list entries by.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Divide(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Division by a scalar.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="scalar">Scalar to divide by.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Divide(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Multiplication of a scalar with a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="scalar">Scalar to divide by.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.DivideInPlace(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Fast version of multiply by a scalar.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to multiple the values of.  Values in list are overwritten.</param>
            <param name="scalar">Scalar to divide by.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.DivideInPlace(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Fast version of multiply by a scalar.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to multiple the values of.  Values in list are overwritten.</param>
            <param name="scalar">Scalar to divide by.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Normalize(System.Collections.Generic.List{System.Double},DigitalProduction.Mathmatics.NormalizationType)">
            <summary>
            Multiplication of a scalar with a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="normalizationType">Method used to normalize the values.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Normalize(System.Collections.Generic.List{System.Double},DigitalProduction.Mathmatics.NormalizationType,System.Int32,System.Int32)">
            <summary>
            Multiplication of a scalar with a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="normalizationType">Method used to normalize the values.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.NormalizeInPlace(System.Collections.Generic.List{System.Double},DigitalProduction.Mathmatics.NormalizationType)">
            <summary>
            Fast version of multiply by a scalar.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to multiple the values of.  Values in list are overwritten.</param>
            <param name="normalizationType">Method used to normalize the values.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.NormalizeInPlace(System.Collections.Generic.List{System.Double},DigitalProduction.Mathmatics.NormalizationType,System.Int32,System.Int32)">
            <summary>
            Fast version of multiply by a scalar.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to multiple the values of.  Values in list are overwritten.</param>
            <param name="normalizationType">Method used to normalize the values.</param>
            <param name="start">Starting index.</param>
            <param name="count">Number of entries to use in the calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.NormalizationValue(System.Collections.Generic.List{System.Double},DigitalProduction.Mathmatics.NormalizationType)">
            <summary>
            Get the normalization value of a list based on the specified NormalizationType.
            </summary>
            <param name="values">Input list.</param>
            <param name="normalizationType">NormalizationType.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.VectorLength(System.Collections.Generic.List{System.Double})">
            <summary>
            Vector length (Euclidian norm) of a list of doubles.
            </summary>
            <param name="values">Input list.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.MaxAbsoluteValue(System.Collections.Generic.List{System.Double})">
            <summary>
            Find the maximum of the absolute values.
            </summary>
            <param name="values">Input list.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.SquareRoot(System.Collections.Generic.List{System.Double})">
            <summary>
            Square root entry by entry.
            </summary>
            <param name="values">List to take the square root of.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.SquareRootInPlace(System.Collections.Generic.List{System.Double})">
            <summary>
            Fast version of multiply by a scalar.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to multiple the values of.  Values in list are overwritten.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Hypotenuse(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Entry wise SRSS (the hypotenuse) of the lists.
            </summary>
            <param name="leftValues">Values for calculation.</param>
            <param name="rightValues">Values for calculation.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Derivative(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Takes the derivative of a list of doubles.  Duplicates the last entry to create an output list
            that is the same length of the input list.
            
            Assumes constant time step size.
            </summary>
            <param name="values">List to take the derivative of.</param>
            <param name="timestep">Time step size to take derivative over.</param>
        </member>
        <member name="T:DigitalProduction.Forms.AbstractControlDescriptionProvider`2">
            <summary>
            Provides a way for the designer to work with abstract base classes.
            
            To use, preface the class declaration with:
            [TypeDescriptionProvider(typeof(AbstractControlDescriptionProvider&lt;TAbstract, TBase&gt;))]
            
            http://stackoverflow.com/questions/1620847/how-can-i-get-visual-studio-2008-windows-forms-designer-to-render-a-form-that-im/2406058#2406058
            </summary>
            <typeparam name="TAbstract">Abstract class.</typeparam>
            <typeparam name="TBase">Base class.</typeparam>
        </member>
        <member name="M:DigitalProduction.Forms.AbstractControlDescriptionProvider`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.AbstractControlDescriptionProvider`2.GetReflectionType(System.Type,System.Object)">
            <summary>
            Tell anyone who reflects on us that the concrete form is the form to reflect against, not the abstract form. This way, the
            designer does not see an abstract class. 
            </summary>
            <param name="objectType">Object type.</param>
            <param name="instance">Instance.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AbstractControlDescriptionProvider`2.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
            <summary>
            If the designer tries to create an instance of AbstractForm, we override it here to create a concrete form instead.
            </summary>
            <param name="provider">Service provider.</param>
            <param name="objectType">Object type.</param>
            <param name="argTypes">Argument Types.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="T:DigitalProduction.Forms.AdvancedProjectUpdateForm">
            <summary>
            Form used to specify how to update a file inside of a project archive.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.#ctor">
            <summary>
            Constructor for designer.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.buttonBrowseProjectFile_Click(System.Object,System.EventArgs)">
            <summary>
            Get a file.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.buttonXsltFile_Click(System.Object,System.EventArgs)">
            <summary>
            Get a file.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.textBoxFile_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Project file text box validation.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.listViewFiles_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Validate that a file has been selected for updating.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.buttonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Ok click handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.PopulateFileList">
            <summary>
            Populate the list view with the files in the project archive so the user can select the one they want to update.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.AdvancedProjectUpdateForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AdvancedProjectUpdateForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.BasicProjectUpdateForm">
            <summary>
            Form used to specify how to update a file inside of a project archive.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.BasicProjectUpdateForm.#ctor">
            <summary>
            Constructor for designer.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.BasicProjectUpdateForm.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="internalFileName">Internal file name (file extracted from project zip file).</param>
            <param name="projectFilterString">Filter string to use when selecting a project archive.</param>
            <param name="xsltDirectory">Directory that contains XSLT files that can be used for the transformation of the project file.</param>
        </member>
        <member name="M:DigitalProduction.Forms.BasicProjectUpdateForm.buttonBrowseProjectFile_Click(System.Object,System.EventArgs)">
            <summary>
            Get a file.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.BasicProjectUpdateForm.buttonXsltFile_Click(System.Object,System.EventArgs)">
            <summary>
            Get a file.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.BasicProjectUpdateForm.textBoxFile_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Project file text box validation.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.BasicProjectUpdateForm.buttonOk_Click(System.Object,System.EventArgs)">
            <summary>
            Ok click handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="F:DigitalProduction.Forms.BasicProjectUpdateForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.BasicProjectUpdateForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DigitalProduction.Forms.BasicProjectUpdateForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.DirectorySelect">
            <summary>
            Helper functions for selecting a directory using a dialog box.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DirectorySelect.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DirectorySelect.SelectDirectory(System.String,System.Boolean,System.String)">
            <summary>
            Run a directory selection dialog.
            </summary>
            <param name="title">Title to display in the dialog box.</param>
            <param name="showNewFolder">Specifies if the "New Folder" button is shown.</param>
            <param name="startingDirectory">Directory to start browsing from.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DirectorySelect.SelectDirectory(System.String,System.Boolean,System.Windows.Forms.TextBox)">
            <summary>
            Run a directory selection dialog.
            </summary>
            <param name="title">Title to display in the dialog box.</param>
            <param name="showNewFolder">Specifies if the "New Folder" button is shown.</param>
            <param name="textBoxToPopulateWithPath">TextBox to retrieve the initial starting directory from and to populate with the result.</param>
        </member>
        <member name="T:DigitalProduction.Forms.ProjectUpdateForm">
            <summary>
            Form used to specify how to update a file inside of a project archive.
            </summary>
        </member>
        <member name="E:DigitalProduction.Forms.ProjectUpdateForm.OnProjectFileSelected">
            <summary>Event for when a project file is selected.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.ProjectUpdateForm.ProjectUpdateFormForDesigner">
            <summary>
            Here is a concrete version of the abstract APSForm that acts as a stand in.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.ProjectUpdateForm.ConcreteProjectUpdateFormProvider">
            <summary>
            Here is our type description provider.  All our provider needs to do is return ConcreteForm as the reflection type.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.ConcreteProjectUpdateFormProvider.#ctor">
            <summary>
            Because we only want to augment the metadata for AbstractForm, instead of completely replace it, we pass into the base class the current type
            description provider.  This is the provider that normally handles metadata for AbstractForm.  By doing this all we have to do is
            override the areas we want to change.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.ConcreteProjectUpdateFormProvider.GetReflectionType(System.Type,System.Object)">
            <summary>
            Tell anyone who reflects on us that the concrete form is the form to reflect against, not the abstract form. This way, the
            designer does not see an abstract class.
            </summary>
            <param name="objectType">Object type.</param>
            <param name="instance">Instance.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.ConcreteProjectUpdateFormProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
            <summary>
            If the designer tries to create an instance of AbstractForm, we override it here to create a concrete form instead.
            </summary>
            <param name="provider">Service provider.</param>
            <param name="objectType">Object type.</param>
            <param name="argTypes">Argument Types.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.#ctor">
            <summary>
            Constructor for designer.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.BrowseForProjectFile(System.Windows.Forms.TextBox)">
            <summary>
            Gets the project file and stores it in the text box.
            </summary>
            <param name="pathTextBox">Text box to store the file in.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.BrowseForXsltFile(System.Windows.Forms.TextBox)">
            <summary>
            Gets the XSLT file and stores it in the text box.
            </summary>
            <param name="pathTextBox">Text box to store the file in.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.ValidateFileExists(System.Windows.Forms.TextBox,System.ComponentModel.CancelEventArgs)">
            <summary>
            Validate that a file exists.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.RunTransformation(System.String,System.String,System.String)">
            <summary>
            Run the transformation.
            </summary>
            <param name="projectPath">Project file path (path on disk for the zipped project file).</param>
            <param name="internalFileName">Internal file name (file extracted from project zip file).</param>
            <param name="xsltFile">XSLT file.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.UpdateProject">
            <summary>
            The main work of updating the project.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.DisplayMessage(System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Display a message.  Can be used as a call back function.
            </summary>
            <param name="message">Message to display.</param>
            <param name="caption">Caption to use.</param>
            <param name="icon">Icon to use.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.RaiseOnProjectFileSelected">
            <summary>
            Access for manually firing event for external sources.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.ProjectUpdateForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProjectUpdateForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.ReadOnlySettableForm">
            <summary>
            A form that can have all it's controls disabled to create a read only form.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ReadOnlySettableForm.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ReadOnlySettableForm.#ctor(System.Boolean)">
            <summary>
            Constructor to set read only state.
            </summary>
            <param name="readOnly">Specifies if the controls should be set to read only.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ReadOnlySettableForm.ReadOnlySettableForm_Load(System.Object,System.EventArgs)">
            <summary>
            Form Load event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ReadOnlySettableForm.SetReadOnly">
            <summary>
            Set the form to read only.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ReadOnlySettableForm.SetControlsToReadOnly(System.Windows.Forms.Control)">
            <summary>
            Sets the controls to read only.
            </summary>
            <param name="rootControl">Control to set child controls to read only.</param>
        </member>
        <member name="F:DigitalProduction.Forms.ReadOnlySettableForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ReadOnlySettableForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ReadOnlySettableForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.RotatedLabel">
            <summary>
            A label that can rotate text.
            
            This class is partially based on the concepts posted by users Javed Akram and Buddy at:
            https://stackoverflow.com/questions/1371943/c-sharp-vertical-label-in-a-windows-forms
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.RotatedLabel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RotatedLabel.Angle">
            <summary>
            Text angle.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RotatedLabel.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RotatedLabel.TextAlign">
            <summary>
            Alignment.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RotatedLabel.Font">
            <summary>
            The font used to display the text in the control.
            </summary>
            <remarks>
            Capture change so we can update control.
            </remarks>
        </member>
        <member name="P:DigitalProduction.Forms.RotatedLabel.AutoSize">
            <summary>
            Enables automatic resizing based on font size.
            </summary>
            <remarks>
            Capture change so we can update control.
            </remarks>
        </member>
        <member name="M:DigitalProduction.Forms.RotatedLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Painting event that does the work.
            </summary>
            <param name="paintEventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RotatedLabel.RotatedLabel_Resize(System.Object,System.EventArgs)">
            <summary>
            When we resize, we need to update the text.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RotatedLabel.CalculateOffsetForRotation(System.Drawing.Point@,System.Drawing.Point@,System.Drawing.Size@)">
            <summary>
            Finds the starting offset based on the rotated text position.
            </summary>
            <param name="rotatedHeight">Height rotated by the text angle.</param>
            <param name="rotatedWidth">Width rotated by the text angle.</param>
            <param name="textBoundingBox">Size of bounding box for the rotated text (height and width of the rotated text).</param>
        </member>
        <member name="M:DigitalProduction.Forms.RotatedLabel.CalculateOffsetForAlignment(System.Drawing.Size@)">
            <summary>
            Finds the offset required to create the text alignment.
            </summary>
            <param name="textBoundingBox">Size of bounding box for the rotated text (height and width of the rotated text).</param>
        </member>
        <member name="M:DigitalProduction.Forms.RotatedLabel.SetControlSize(System.Drawing.Size)">
            <summary>
            Sizes the control based on the AutoSize setting.
            </summary>
            <param name="textBoundingBox">Size of bounding box for the rotated text (height and width of the rotated text).</param>
        </member>
        <member name="M:DigitalProduction.Forms.RotatedLabel.CalculateQuadrant">
            <summary>
            Determines the quadrant we are in.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.RotatedLabel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.RotatedLabel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RotatedLabel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.ValidatingNumericUpDown">
             <summary>
             Text box that only allows numeric values.
            
             From: http://msdn.microsoft.com/en-us/library/dd183783%28v=vs.90%29.aspx
             </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ValidatingNumericUpDown.#ctor">
            <summary>
            Construction.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ValidatingNumericUpDown.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            When validating, pad any remaining decimal places with zeros.
            </summary>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="P:DigitalProduction.Forms.ValidatingNumericUpDown.BeepOnError">
            <summary>
            If true, the default "beep" sound will be emitted if an invalid key is pressed.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ValidatingNumericUpDown.IntValue">
            <summary>
            Return value as an integer (int).
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ValidatingNumericUpDown.DecimalValue">
            <summary>
            Return value as a decimal.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ValidatingNumericUpDown.DoBeep">
            <summary>
            Beep on an error, if the option is enabled.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ValidatingNumericUpDown.ConvertValueToDouble(System.String,System.Boolean@)">
            <summary>
            Convert the value to a double and catch any errors.
            </summary>
            <param name="text">Text to try to convert.</param>
            <param name="passed">Flag to indicate if the conversion was successful.</param>
        </member>
        <member name="F:DigitalProduction.Forms.ValidatingNumericUpDown.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ValidatingNumericUpDown.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ValidatingNumericUpDown.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.MultipleFileSelectControl">
            <summary>
            A control for selecting multiple files and listing them in a ListBox.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MultipleFileSelectControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MultipleFileSelectControl.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MultipleFileSelectControl.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.MultipleFileSelectControl.FilterString">
            <summary>
            Filter string for file browsing.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.MultipleFileSelectControl.BrowseForFilesTitle">
            <summary>
            Title for browsing for files.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.MultipleFileSelectControl.InitialDirectory">
            <summary>
            Initial directory for file browsing.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.MultipleFileSelectControl.GroupBoxText">
            <summary>
            Change the name of the GroupBox around the controls.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.MultipleFileSelectControl.SelectedFiles">
            <summary>
            Items selected in the form.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.MultipleFileSelectControl.FilesHaveBeenSelected">
            <summary>
            Specifies if files have been selected.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MultipleFileSelectControl.selectFilesButton_Click(System.Object,System.EventArgs)">
            <summary>
            Browse for files event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MultipleFileSelectControl.removeFilesButton_Click(System.Object,System.EventArgs)">
            <summary>
            Remove selected items from ListBox.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MultipleFileSelectControl.filesListBox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Selected items in ListBox changed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="F:DigitalProduction.Forms.MultipleFileSelectControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MultipleFileSelectControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MultipleFileSelectControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.AboutForm1">
             <summary>
             A simple "about" dialog box.
            
             Extracts information from the assembly to population the labels.
             </summary>
        </member>
        <member name="M:DigitalProduction.Forms.AboutForm1.#ctor(System.String)">
            <summary>
            Constructor with contact email.
            </summary>
            <param name="contactemail">Contact email address.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AboutForm1.#ctor(System.String,System.String)">
            <summary>
            Constructor for replacing the default image.
            </summary>
            <param name="contactemail">Contact email address.</param>
            <param name="imageresourcename">An image to replace default.  Image is located as a resource.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AboutForm1.Initialize(System.String,System.String)">
            <summary>
            Initialize the form.
            </summary>
            <param name="contactEmail">Email address of the contact person.</param>
            <param name="imageResourceName">Image resource name.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AboutForm1.linkReportErrors_Clicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Linked clicked event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AboutForm1.buttonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Ok button event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AboutForm1.Dispose(System.Boolean)">
            <summary>
            Dispose of form.
            </summary>
            <param name="disposing">Disposing of form.</param>
        </member>
        <member name="T:DigitalProduction.Forms.ExtendedDataGridView">
            <summary>
            A DataGridView with copy and pasting of cells enabled.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.ExtendedDataGridView.InsertDelegate">
            <summary>
            Template for function which performs insertion of new row of data.
            </summary>
        </member>
        <member name="E:DigitalProduction.Forms.ExtendedDataGridView.Insertion">
            <summary>
            Insert event.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.InitializeComponent">
            <summary>
            Initialize controls.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ExtendedDataGridView.ContextMenuEnabled">
            <summary>
            Specifies if the context menu for copy/cut/paste is enabled.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.ContextMenuStrip_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Context menu opening.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.dataGridView1_CellMouseClick(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Mouse click in a cell handlers.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.ExtendedDataGridView_DataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
            <summary>
            Handle data entry error.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuCut_Click(System.Object,System.EventArgs)">
            <summary>
            Cut event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuCopy_Click(System.Object,System.EventArgs)">
            <summary>
            Copy event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuPaste_Click(System.Object,System.EventArgs)">
            <summary>
            Paste event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuInsert_Click(System.Object,System.EventArgs)">
            <summary>
            Insert event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.DataGridViewWithCopyPaste_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Keyboard events.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.SetContextMenuState">
            <summary>
            Setup the context menu.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Cut">
            <summary>
            Copies the contents to the clipboard, then erases the data.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Copy">
            <summary>
            Copies the data to the clipboard.  Performs a check to make sure the data exists before copying.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Paste">
            <summary>
            Paste data to the cells.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Delete">
            <summary>
            Removes the contents of the cells and sets them to the default values.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Insert">
            <summary>
            Inserts a new row.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.GetStartCell">
            <summary>
            Find the starting cell (lowest row and column) of the selected cells.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.ClipBoardValues(System.String)">
            <summary>
            Parses a clipboard string and returns the values in the string in a Dictionary.
            </summary>
            <param name="clipboardstring">Clipboard string to parse.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.WriteAsImage(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Write the control to the disk as an image.
            </summary>
            <param name="path">Path to write the image to.</param>
            <param name="format">Format to write the image in.</param>
        </member>
        <member name="T:DigitalProduction.Forms.DPMProgressableForm">
            <summary>
            Form with a progress bar.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.DPMProgressableForm._progressCallback">
            <summary>
            Progress callback function.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="applicationname">Name of application.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="companyname">Company name.</param>
            <param name="applicationname">Name of application.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.Initialize">
            <summary>
            Initialization.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.InvokeDisplayMessage(System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Display a message.
            </summary>
            <param name="message">Message to display</param>
            <param name="caption">Caption to display on the title bar.</param>
            <param name="icon">Icon to display with the message.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.DisplayMessage(System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            For displaying a message when an invoke is required.
            </summary>
            <param name="message">Message to display</param>
            <param name="caption">Caption to display on the title bar.</param>
            <param name="icon">Icon to display with the message.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.ReportProgress(System.Int32)">
            <summary>
            Update the progress bar.
            </summary>
            <param name="progress">Progress to report.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.StartProcessThread">
            <summary>
            Start the processing thread.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.RunProcessingThread">
            <summary>
            Does the work of running the thread.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.HandleCancel">
            <summary>
            Cancel handling.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.DoProcessing">
            <summary>
            Run the processing.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.ProcessingCleanUp">
            <summary>
            Processing clean up.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.ExceptionCleanUp">
            <summary>
            Exception clean up.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.FileSelect">
            <summary>
            Helper functions for selecting a file using a dialog box.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.FileSelect.AllFilesFilterString">
            <summary>
            Standard string used for all files.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.FileSelect.CSVFilesFilterString">
            <summary>
            Standard string used for text files.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.FileSelect.TextFilesFilterString">
            <summary>
            Standard string used for text files.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAnXMLFile(System.Windows.Forms.IWin32Window)">
             <summary>
             Use an OpenFileDialog box to get the location of an XML file.  Starting directory is the current
             working directory and the title of the dialog box is "Open."
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAnXMLFile(System.Windows.Forms.IWin32Window,System.String)">
             <summary>
             Use an OpenFileDialog box to get the location of an XML file.  Starting directory is the current
             working directory.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="title">Title of the OpenFileDialog box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAnXMLFile(System.Windows.Forms.IWin32Window,System.String,System.String)">
             <summary>
             Use an OpenFileDialog box to get the location of an XML file.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="title">Title of the OpenFileDialog box.</param>
             <param name="initialDirectory">Directory to start in.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAnXMLFile(System.Windows.Forms.IWin32Window,System.String,System.String,System.Boolean)">
             <summary>
             Use an OpenFileDialog box to get the location of an XML file.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="title">Title of the OpenFileDialog box.</param>
             <param name="initialDirectory">Directory to start in.</param>
             <param name="restoreDirectory">
             If true, the directory from the selected file will be used when the dialog is next opened.  Otherwise, it will be ignored and defaulted to what
             folder was current before the dialog was opened.
             </param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAFile(System.Windows.Forms.IWin32Window,System.String)">
             <summary>
             Use an OpenFileDialog box to get the location of a file.  Starting directory is the current
             working directory and the title of the dialog box is "Open."
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAFile(System.Windows.Forms.IWin32Window,System.String,System.String)">
             <summary>
             Use an OpenFileDialog box to get the location of a file.  Starting directory is the current
             working directory.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
             <param name="title">Title of the OpenFileDialog box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAFile(System.Windows.Forms.IWin32Window,System.String,System.String,System.String)">
             <summary>
             Use an OpenFileDialog box to get the location of a file.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
             <param name="title">Title of the OpenFileDialog box.</param>
             <param name="initialDirectory">Directory to start in.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAFile(System.Windows.Forms.IWin32Window,System.String,System.String,System.Boolean)">
             <summary>
             Use an OpenFileDialog box to get the location of a file.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
             <param name="title">Title of the OpenFileDialog box.</param>
             <param name="restoreDirectory">
             If true, the directory from the selected file will be used when the dialog is next opened.  Otherwise, it will be ignored and defaulted to what
             folder was current before the dialog was opened.
             </param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAFile(System.Windows.Forms.IWin32Window,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Use an OpenFileDialog box to get the location of a file.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
             <param name="title">Title of the OpenFileDialog box.</param>
             <param name="initialDirectory">Directory to start in.</param>
             <param name="restoreDirectory">
             If true, the directory from the selected file will be used when the dialog is next opened.  Otherwise, it will be ignored and defaulted to what
             folder was current before the dialog was opened.
             </param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForMultipleFiles(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Use an OpenFileDialog box to select several files.  Starting directory is the current directory.
            working directory.  Returns the files selected, or "" if a valid file is not selected.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
            <param name="title">Title of the OpenFileDialog box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForMultipleFiles(System.Windows.Forms.IWin32Window,System.String,System.String,System.String)">
            <summary>
            Use an OpenFileDialog box to select several files.  Starting directory is the current directory.
            working directory.  Returns the files selected, or "" if a valid file is not selected.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
            <param name="title">Title of the OpenFileDialog box.</param>
            <param name="initialDirectory">Directory to start in.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForMultipleFiles(System.Windows.Forms.IWin32Window,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Use an OpenFileDialog box to select several files.  Returns the files selected, or "" if a valid file is not selected.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
            <param name="title">Title of the OpenFileDialog box.</param>
            <param name="initialdirectory">Directory to start in.</param>
            <param name="restoreDirectory">
            If true, the directory from the selected file will be used when the dialog is next opened.  Otherwise, it will be ignored and defaulted to what
            folder was current before the dialog was opened.
            </param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewXMLFileLocation(System.Windows.Forms.IWin32Window)">
             <summary>
             Use a SaveFileDialog box to get a location for a new XML file.  Starting directory is the current
             working directory and the title of the dialog box is "Save As."  Returns the new file selected, or "" if
             a valid file is not selected.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewXMLFileLocation(System.Windows.Forms.IWin32Window,System.String)">
             <summary>
             Use a SaveFileDialog box to get a location for a new XML file.  Starting directory is the current
             working directory.  Returns the new file selected, or "" if a valid file is not selected.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="title">Title of the SaveFileDialog box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewXMLFileLocation(System.Windows.Forms.IWin32Window,System.String,System.String)">
             <summary>
             Use a SaveFileDialog box to get a location for a new XML file.  Returns the new file selected, or "" if a valid file is not selected.
            
             Returns the new file selected, or "" if a valid file is not selected.
             </summary>
             <param name="owner">Owner window.</param>
             <param name="title">Title of the SaveFileDialog box.</param>
             <param name="initialdirectory">Directory to start in.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewFileLocation(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Use a SaveFileDialog box to get a location for a new file.  Starting directory is the current
            working directory and the title of the dialog box is "Save As."  Return the new file selected, or "" if a valid file is not selected.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Saves as file type"  box in the dialog box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewFileLocation(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Use a SaveFileDialog box to get a location for a new file.  Starting directory is the current
            working directory.  Returns the new file selected, or "" if a valid file is not selected.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Saves as file type"  box in the dialog box.</param>
            <param name="title">Title of the SaveFileDialog box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewFileLocation(System.Windows.Forms.IWin32Window,System.String,System.String,System.String)">
            <summary>
            Use a SaveFileDialog box to get a location for a new file.  Starting directory is the current
            working directory.  Returns the new file selected, or "" if a valid file is not selected.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Saves as file type"  box in the dialog box.</param>
            <param name="title">Title of the SaveFileDialog box.</param>
            <param name="initialDirectory">Directory to start in.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewFileLocation(System.Windows.Forms.IWin32Window,System.String,System.String,System.Boolean)">
            <summary>
            Use a SaveFileDialog box to get a location for a new file.  Returns the new file selected, or "" if a valid file is not selected.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Saves as file type"  box in the dialog box.</param>
            <param name="title">Title of the SaveFileDialog box.</param>
            <param name="restoreDirectory">
            If true, the directory from the selected file will be used when the dialog is next opened.  Otherwise, it will be ignored and defaulted to what
            folder was current before the dialog was opened.
            </param>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewFileLocation(System.Windows.Forms.IWin32Window,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Use a SaveFileDialog box to get a location for a new file.  Returns the new file selected, or "" if a valid file is not selected.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Saves as file type"  box in the dialog box.</param>
            <param name="title">Title of the SaveFileDialog box.</param>
            <param name="initialDirectory">Directory to start in.</param>
            <param name="restoreDirectory">
            If true, the directory from the selected file will be used when the dialog is next opened.  Otherwise, it will be ignored and defaulted to what
            folder was current before the dialog was opened.
            </param>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll">
             <summary>
             Provides a parallel form and Show methods to MessageBox but adds "Yes to All" and "No to All" options.
            
             A delegate is provided which allows the MessageBoxYesNoToAll set and get the result of the dialog call.  This allow the
             "Yes to All" and "No to All" options work by storing the value and using it for later calls.  Note, the stored value must
             be reset in order to re-display the message box.
            
             Allows for the option to return "Yes to All" as "Yes" and "No to All" as "No."  This means the calling function does not need
             to check both "Yes/No to All" and "Yes/No" to determine if it's work should be done.
             </summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.Result">
            <summary>
            Results of the dialog.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.Yes">
            <summary>Yes.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.YesToAll">
            <summary>Yes to All button was pushed.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.No">
            <summary>No button was pushed.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.NoToAll">
            <summary>No to All button was pushed.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.Cancel">
            <summary>Cancel button was pushed.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons">
            <summary>
            Buttons shown on the dialog.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesToAllNo">
            <summary>Yes, Yes to All, No.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesToAllNoCancel">
            <summary>Yes to All, No, Cancel.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesNoToAll">
            <summary>Yes, No, No to All.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesNoToAllCancel">
            <summary>Yes, No, No to All, Cancel.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesToAllNoToAll">
            <summary>Yes, Yes to All, No, No to All.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesToAllNoToAllCancel">
            <summary>Yes, Yes to All, No, No to All, Cancel.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon">
            <summary>
            Icon shown on the dialog.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Asterisk">
            <summary>Asterisk icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Error">
            <summary>Error icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Exclamation">
            <summary>Exclamation icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Hand">
            <summary>Hand icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Information">
            <summary>Information icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.None">
            <summary>No icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Question">
            <summary>Question icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Warning">
            <summary>Warning icon.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton">
            <summary>
            Button that is the default on the form (button activated if "enter" is pressed).
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button1">
            <summary>Button 1.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button2">
            <summary>Button 2.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button3">
            <summary>Button 3.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button4">
            <summary>Button 4.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button5">
            <summary>Button 5.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.StoreResultDelegate">
            <summary>
            Delegate signature for the function used to save and retrieve the result of showing the dialog box.
            </summary>
            <param name="result">Result of showing the dialog box.</param>
            <param name="setvalue">If true, the result must be saved.  If false, the result must be retrieved and stored in the "result" parameter.</param>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll._storeresultfunction">
            <summary>
            Delegate function used to store the result of the dialog display and to access the result for the previous display.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.#ctor(DigitalProduction.Forms.MessageBoxYesNoToAll.StoreResultDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="storeResultFunction"></param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.#ctor(DigitalProduction.Forms.MessageBoxYesNoToAll.StoreResultDelegate,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="storeResultFunction"></param>
            <param name="returnOnlyYesNo">If true, "Yes to All" is returned as "Yes" and "No to All" is returned as "No."</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons,DigitalProduction.Forms.MessageBoxYesNoToAll.Icon)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
            <param name="icon">Icon to show.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons,DigitalProduction.Forms.MessageBoxYesNoToAll.Icon,DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
            <param name="icon">Icon to show.</param>
            <param name="defaultButton">Which button is default.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.CheckResult(DigitalProduction.Forms.MessageBoxYesNoToAll.Result)">
            <summary>
            Performs the duty of converting "Yes to All" to "Yes" and "No to All" to "No" if that option is selected.
            </summary>
            <param name="dialogResult">Input dialog result.</param>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAllForm">
             <summary>
             Provides parallel behavior to the MessageBox class but adds "Yes to All" and "No to All" options.  This is the form that is diplayed.
             This class should not be used directory.  It is used by the MessabeBoxYesNoToAll and, in combination, they provide the behavior which
             parallels the standard MessageBox while adding the new controls.
            
            
             </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons,DigitalProduction.Forms.MessageBoxYesNoToAll.Icon)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
            <param name="icon">Icon to show.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons,DigitalProduction.Forms.MessageBoxYesNoToAll.Icon,DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
            <param name="icon">Icon to show.</param>
            <param name="defaultbutton">Which button is default.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.Initialize">
            <summary>
            Common construction/initialization.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.MessageBoxYesNoToAllForm.Result">
            <summary>
            Dialog result.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnYes_Click(System.Object,System.EventArgs)">
            <summary>
            Yes button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnYesToAll_Click(System.Object,System.EventArgs)">
            <summary>
            Yes to All button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnNo_Click(System.Object,System.EventArgs)">
            <summary>
            No button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnNoToAll_Click(System.Object,System.EventArgs)">
            <summary>
            No to All button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.SetIcon(DigitalProduction.Forms.MessageBoxYesNoToAll.Icon)">
            <summary>
            Creates the image on the control from the specified icon.
            </summary>
            <param name="icon">Icon to show.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.SetButtons(DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons)">
            <summary>
            Sets which buttons are shown on the control.  Returns an array of bools indicating which buttons are set.
            </summary>
            <param name="buttons">Which buttons are shown.</param>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAllForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="T:DigitalProduction.Forms.ProgressDialog">
            <summary>
            Summary description for ProgressDialog.
            </summary>
            <summary>
            Provide summary.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.#ctor(System.Windows.Forms.ProgressBarStyle)">
            <summary>
            Constructor for changing the progress bar style.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ProgressDialog.AllowCancel">
            <summary>
            Specifies if the cancel button should be shown.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ProgressDialog.ElapsedTime">
            <summary>
            Get the time elapsed between the start time and end time (or, if timing has not ended, the time between
            the start time and now).
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ProgressDialog.ProgressBar">
            <summary>
            Determines if the progress bar is visible.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ProgressDialog.Maximum">
            <summary>
            The maximum value to use for the progress bar.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ProgressDialog.Value">
            <summary>
            The value of the progress bar.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.tmrClock_Tick(System.Object,System.EventArgs)">
            <summary>
            Updates the clock on the status bar.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.StartShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form with the specified owner to the use.  Also resets the progress bar and starts the timer.
            </summary>
            <param name="owner">Any object that implements the System.Windows.Forms.IWin32Window and represents the top-level window that will own this form.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.StartTimer">
            <summary>
            Start timing.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.StopTimer">
            <summary>
            Stop the timer.  The time elapsed between the start and stop can then be retrieved.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.ResetTimer">
            <summary>
            Resets the timer to zero.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.ResetProgress">
            <summary>
            Reset the progress bar.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.PerformStep">
            <summary>
            Perform step.  Increments the progress bar.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.CloseOK">
            <summary>
            Allow the option to close this dialog externally (from another class) and return DialogResult.OK
            as the result.  Using Close from another class always results in DialogResult.Cancel as the result.
            
            Setting the dialog result will cause the closing of the form if it is shown model (using "ShowDialog" or "StartShowDialog").
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.UpdateProgress(System.Int32)">
            <summary>
            Update the progress bar via a function.
            </summary>
            <param name="value">Value of the progress bar as an integer from 0-100.</param>
            <remarks>
            This can be used as an UpdateProgressCallBack delegate to update the progress bar 
            from another thread.
            </remarks>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.SetProgressValue(System.Int32)">
            <summary>
            Update the progress bar.
            </summary>
            <param name="value">Value of the progress bar as an integer from 0-100.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.SetCaption(System.String)">
            <summary>
            Sets the caption (title bar text) shown on the form.
            </summary>
            <param name="caption">Text to display.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.SetCaptionText(System.String)">
            <summary>
            The actual work of setting the message.  We make a separate function so that it can be invoked from a delegate when
            an invoke is required.
            </summary>
            <param name="caption">Text to display.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.SetMessage(System.String)">
            <summary>
            Sets the message shown on the form (sets the label).
            </summary>
            <param name="message">Text to display.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.SetMessageText(System.String)">
            <summary>
            The actual work of setting the message.  We make a separate function so that it can be invoked from a delegate when
            an invoke is required.
            </summary>
            <param name="message">Text to display.</param>
        </member>
        <member name="F:DigitalProduction.Forms.ProgressDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.RecentFilesList">
            <summary>
            A class for creating a recently used files list on a menu.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.RecentFilesList.RecentFileClickedDelegate">
            <summary>
            Call back delegate for when a recent file control was clicked and the path on the control exists.
            </summary>
            <param name="path">The path that is displayed on the clicked control.</param>
        </member>
        <member name="T:DigitalProduction.Forms.RecentFilesList.RecentFileNotFoundDelegate">
            <summary>
            Call back delegate for when a recent file control was clicked and the path on the control does not exist.
            </summary>
            <param name="path">The path that is displayed on the clicked control.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.#ctor(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Basic constructor.
            </summary>
            <param name="menuItem">Menu item the list is attached to.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.#ctor(System.Windows.Forms.ToolStripMenuItem,DigitalProduction.Forms.RecentFilesList.RecentFileClickedDelegate)">
            <summary>
            Basic constructor.
            </summary>
            <param name="menuItem">Menu item the list is attached to.</param>
            <param name="fileClickDelegate">The call back function (delegate) to receive the path displayed on the control.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.#ctor(System.Windows.Forms.ToolStripMenuItem,DigitalProduction.Forms.RecentFilesList.RecentFileClickedDelegate,DigitalProduction.Forms.RecentFilesList.RecentFileNotFoundDelegate)">
            <summary>
            Basic constructor.
            </summary>
            <param name="menuItem">Menu item the list is attached to.</param>
            <param name="fileClickDelegate">The call back function (delegate) to receive the path displayed on the control.</param>
            <param name="fileNotFoundDelegate">The call back function (delegate) to receive the path displayed on the control when the corresponding file does not exist.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.#ctor(System.Windows.Forms.ToolStripMenuItem,DigitalProduction.Forms.RecentFilesList.RecentFileClickedDelegate,DigitalProduction.Forms.RecentFilesList.RecentFileNotFoundDelegate,DigitalProduction.Registry.FormWinRegistryAccess)">
            <summary>
            Constructor to use the option to automatically save the list and size of the list to the registry.
            </summary>
            <param name="menuItem">Menu item the list is attached to.</param>
            <param name="fileClickDelegate">The call back function (delegate) to receive the path displayed on the control.</param>
            <param name="fileNotFoundDelegate">The call back function (delegate) to receive the path displayed on the control when the corresponding file does not exist.</param>
            <param name="registryAccess">Registry access of parent form.</param>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.FileClickedDelegate">
            <summary>
            The call back function for when a recent file menu items is clicked.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.FileNotFoundDelegate">
            <summary>
            The call back function for when a recent file menu item is clicked, but the file does not exist at the location specified on the control.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.RegistryAccess">
            <summary>
            Access to the registry for storing data between program instances.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.MaxNumberOfItemsShown">
            <summary>
            Get the number of controls that are shown.  Attempts to retrieve the value from the registry, if it
            fails, the maximum number of allowed files is returned.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.RemoveNotFoundFiles">
            <summary>
            Gets or sets a value that states whether controls should be removed if they are clicked and the file does not exist.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.AddNewFilePath(System.String)">
            <summary>
            Add a new file (path) to the top of the recently used files list.
            </summary>
            <param name="path">File (path) to add.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.OpenFile(System.Int32)">
            <summary>
            Open the file on the numbered menu.  Parameter is zero based.
            </summary>
            <param name="number">Zero based index of menu to open.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.Initialize">
            <summary>
            Setup the control.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.OpenFile(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Open the file on the specified menu.
            </summary>
            <param name="menu">Menu to get the file from.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.PushTop(System.String)">
            <summary>
            Creates a list of strings that the new list of paths, with the new path inserted at the top.  If the supplied
            path is located in the list at some other position, it is removed from that position and the other paths moved
            up to fill that slot.
            </summary>
            <param name="path">Path to insert at top of the list.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.FindIndexOf(System.String)">
            <summary>
            Finds the zeroth based index of the path in the list of existing paths.  If the path is not found, the last index is returned.
            </summary>
            <param name="path">Path to search for.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.FindIndexOf(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Finds the zeroth based index of the ToolStripMenuItem in the list of menu items.  If the control is not found, the last index is returned.
            </summary>
            <param name="menuitem">ToolStripMenuItem to search for.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.RemovePath(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Removes the path found on the ToolStripMenuItem from the list of paths.
            </summary>
            <param name="menuitem">ToolStripMenuItem which contains the path to be removed.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.AddPathToMenuItem(System.Windows.Forms.ToolStripMenuItem,System.Int32,System.String)">
            <summary>
            Sets the Text and ToolTipText of a ToolStripMenuitem.
            </summary>
            <param name="menuitem">ToolStripMenuItem to edit.</param>
            <param name="displayednumber">Number to display in front of path.  It's the position on the parent form.</param>
            <param name="path">Path to be displayed.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.SetFileNames">
            <summary>
            Establishes a group of ToolStripMenuItems on the parent control.  The menu items are populate
            with the file names supplied as input.  The number of menu items added to the parent control
            is the same as the length of the input array.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.mnuRecentFile_Clicked(System.Object,System.EventArgs)">
            <summary>
            Event handler for when a recent file is clicked.  The path associated with the clicked ToolStripMenuItem
            is gotten from the ToolTip.  If the file exists the RecentFileClickedDelegate is called.  Otherwise the
            RecentFileNotFoundDelegate is called.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.mnuParent_DropDownOpening(System.Object,System.EventArgs)">
            <summary>
            Event handler for the parent's drop down opening.  Used to update the number of items shown if it has changed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="T:DigitalProduction.Forms.NumericTextBox">
             <summary>
             Text box that only allows numeric values.
            
             From: http://msdn.microsoft.com/en-us/library/dd183783%28v=vs.90%29.aspx
             </summary>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.#ctor">
            <summary>
            Construction.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Restricts the entry of characters to digits (including hexadecimal), the negative sign, the decimal point,
            and editing keystrokes (backspace).
            </summary>
            <param name="eventargs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.HandleNewKey(System.Char)">
            <summary>
            Insert the new key if it is valid, otherwise ignore it.  Returns true if the key has been handled (inserted
            or ignored) by this method, otherwise false is returned and the base control can handle it.
            </summary>
            <param name="keyinput">Key, as a string, to try to insert into the text.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.HandleNewKey(System.Char,System.Boolean@)">
            <summary>
            Insert the new key if it is valid, otherwise ignore it.  Returns true if the key has been handled (inserted
            or ignored) by this method, otherwise false is returned and the base control can handle it.
            </summary>
            <param name="keyinput">Key, as a string, to try to insert into the text.</param>
            <param name="validkey">Output that returns true if the key was valid for insertion, false otherwise.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.DoBeep">
            <summary>
            Beep on an error, if the option is enabled.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key down event.
            </summary>
            <param name="eventargs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key up event.
            </summary>
            <param name="eventargs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            When validating, pad any remaining decimal places with zeros.
            </summary>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.Text">
            <summary>
            Ensure all the decimal places are correct when setting the text.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.BeepOnInvalidKey">
            <summary>
            If true, the default "beep" sound will be emitted if an invalid key is pressed.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.LimitDecimalPlaces">
            <summary>
            Specifies if the number of decimal places is limited.  If they are limited, then only the number
            of decimal digits specified by NumberOfDecimalPlaces is shown on the control.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.NumberOfDecimalPlaces">
            <summary>
            If LimitDecimalPlaces is true, then this is the number of decimal digits allowed.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.DisplayAllDecimalPlaces">
            <summary>
            If DisplayAllDecimalPlaces is true, then zeros will pad any decimal places not filled by the user.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.EnforceMinimumValue">
            <summary>
            Restricts the user to entering values equal to or above the minimum value.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.MinimumValue">
            <summary>
            Minimum value allowed in the text box.  Only enforces if "EnforceMinimumValue" is true.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.EnforceMaximumValue">
            <summary>
            Restricts the user to entering values equal to or below the maximum value.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.MaximumValue">
            <summary>
            Minimum value allowed in the text box.  Only enforces if "EnforceMinimumValue" is true.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.AllowSeparator">
            <summary>
            Specifies is the separator character is allowed.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.IntValue">
            <summary>
            Return value as an integer (int).
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.DecimalValue">
            <summary>
            Return value as a decimal.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.ConvertValueToDouble(System.String,System.Boolean@)">
            <summary>
            Convert the value to a double and catch any errors.
            </summary>
            <param name="text">Text to try to convert.</param>
            <param name="passed">Flag to indicate if the conversion was successful.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.UpdateText(System.Char)">
            <summary>
            Checks current input characters and updates control with valid characters only.  Eliminates all digits to the
            right of extraneous decimal characters.
            </summary>
            <param name="newkey">New key (char) entered.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.InsertNewKeyIntoString(System.Char,System.Int32)">
            <summary>
            Insert the new key character into the text displayed on the text box.  Selected text will be overwritten.
            </summary>
            <param name="newkey">Character to insert.</param>
            <param name="position">Position to insert the character at.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.EnforceAllDecimalPlaces">
            <summary>
            Ensures the number of decimal places shown is correct.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.NumericTextBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.DPMForm">
             <summary>
             DPMForm Class.  this is the base class for all Digital Production Management forms.  It contains
             the common code for all applications (e.g. company name).
            
             The event "Install" is provided to allow all class to chain installation call back functions to it
             so that each class can define it's installation requirements.  This is primarily used for debugging
             purposes, a setup routine should handle the installation of things normally so that they can be
             removed with an uninstaller.
            
             If this form is the child of another the name of the form is held in _appname;
             </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.#ctor">
            <summary>
            Constructor required for form designer.  Do not use this constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.#ctor(System.String)">
            <summary>
            Constructor applications should use.
            </summary>
            <param name="applicationName">Name of the application (used as registry name also).</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.#ctor(System.String,System.String)">
            <summary>
            Constructor top level applications should use if the application is for a different company
            other than the default.
            </summary>
            <param name="companyName">Name of the company (used as registry top level name).</param>
            <param name="applicationName">Name of the application (used as registry name also).</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.#ctor(DigitalProduction.Forms.DPMForm,System.String)">
            <summary>
            Constructor dialog boxes put up by a parent dialog box (such as the application) should use.
            </summary>
            <param name="owner">Form that owns this form.</param>
            <param name="dialogName">Name of this form (used as registry name also).</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.DPMForm.DPMCompanyName">
            <summary>
            Get the name of the company.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.DPMForm.AppName">
            <summary>
            Get the name of the application.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.DPMForm.IsChildForm">
            <summary>
            Returns true if the form is the child of another.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.DPMForm.OwnerDPM">
            <summary>
            Returns the owner of this form if it is a child of another form.  Otherwise null is returned.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.FolderSelectForm">
            <summary> Class FolderSelect
            <para>An example on how to build a folder browser dialog window using C# and the .Net framework.</para>
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.FillTree">
            <summary>This method is used to initially fill the treeView control with a list
            of available drives from which you can search for the desired folder.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.GetSubDirectories(System.Windows.Forms.TreeNode)">
            <summary>This function will scan the specified parent for any subfolders 
            if they exist.  To minimize the memory usage, we only scan a single 
            folder level down from the existing, and only if it is needed.
            </summary>
            <param name="parent">The parent folder in which to search for sub-folders.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.FixPath(System.Windows.Forms.TreeNode)">
            <summary> Fixes the path for display.
            
            For some reason, the treeView will only work with paths constructed like the following example.
            "c:\\Program Files\Microsoft\...".  What this method does is strip the leading "\\" next to the drive
            letter.
            </summary>
            <param name="node">The folder that needs it's path fixed for display.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.DisplayError(System.Exception)">
            <summary>
            Displays a message box with the error message.
            </summary>
            <param name="ex">Exception that occurred.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.treeView1_BeforeSelect(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            <para>Before we select a tree node we want to make sure that we scan the soon to be selected
            tree node for any sub-folders.  this insures proper tree construction on the fly.</para>
            </summary>
            <param name="sender">The object that invoked this event</param>
            <param name="eventArgs">The TreeViewCancelEventArgs event arguments.</param>
            <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs"/>
            <see cref="T:System.Windows.Forms.TreeView"/>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.treeView1_BeforeExpand(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            <para>Before we expand a tree node we want to make sure that we scan the soon to be expanded
            tree node for any sub-folders.  This insures proper tree construction on the fly.</para>
            </summary>
            <param name="sender">The object that invoked this event.</param>
            <param name="eventArgs">The TreeViewCancelEventArgs event arguments.</param>
            <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs"/>
            <see cref="T:System.Windows.Forms.TreeView"/>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.FolderSelect_Resize(System.Object,System.EventArgs)">
            <summary>
            Handles the resizing of the form.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguements.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.PositionButtons">
            <summary>
            Adjusts select and cancel buttons so that they stay in the middle.  Adjusts
            the X position only.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.cancelBtn_Click(System.Object,System.EventArgs)">
            <summary>
            <para>This method cancels the folder browsing.</para>
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelectForm.selectBtn_Click(System.Object,System.EventArgs)">
            <summary>
            This method accepts which ever folder is selected and closes this application 
            with a DialogResult.OK result if you invoke this form though Form.ShowDialog().  
            In this example this method simply looks up the selected folder, and presents the 
            user with a message box displaying the name and path of the selected folder.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.FolderSelectForm.FolderName">
            <summary>
            A method to retrieve the short name for the selected folder.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.FolderSelectForm.FullPath">
            <summary>
            Retrieve the full path for the selected folder.
            <seealso cref="M:DigitalProduction.Forms.FolderSelectForm.FixPath(System.Windows.Forms.TreeNode)"/>
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.FolderSelectForm.Info">
            <summary>
            Retrieve the full DirectoryInfo object associated with the selected folder.  Note
            that this will not have the corrected full path string.
            <see cref="T:System.IO.DirectoryInfo"/>
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxDNS">
            <summary>
            A message box that incorporates a check box to indicate that the message should not be displayed again.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxDNS.RegistryValueDelegate">
            <summary>
            Delegate template to use if you want this message box to access the registry key through a function.  The function
            must store the value of registryvalue if setvalue is true.  If setvalue is false the function must put the stored
            value into registryvalue.
            </summary>
            <example>
            new MessageBoxDNS.RegistryValueDelegate(MyRegFunction)
            </example>
            
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._registryaccessfunction">
            <summary>
            Function template to store the registry value.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._cbt">
            <summary>
            Hook onto window events.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._hwnd">
            <summary>
            Windows handle of this window.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._checkbox">
            <summary>
            Check box that is created on the message box.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._bInit">
            <summary>
            Is this window active.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._boxischecked">
            <summary>
            Is the check box added to the message box checked?
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._registrykey">
            <summary>
            Registry key location.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._registryvalue">
            <summary>
            Registry value (entry).
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._DoNotShowAgainMessage">
            <summary>
            Default text for the Do Not Show check box.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.#ctor(System.String,System.String)">
            <summary>
            Constructor.  Use this constructor to access a registry key by providing the key and value as strings.
            </summary>
            <param name="registrykey">The registry key used to hold the registry value which is used to store the do not show again value.</param>
            <param name="registryvalue">Registry value which stores the result of the do not show again check box.</param>
            <example>
            MessageBoxDNS dialog = new MessageBoxDNS(@"Software\My Company\My App", "Dont Show Again");
            dialog.Show(this, "Warning: Something", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
            </example>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.#ctor(DigitalProduction.Forms.MessageBoxDNS.RegistryValueDelegate)">
            <summary>
            Constructor.  Use this constructor to access a registry key (or any other place that the value can be stored) by
            providing a function of the form RegistryValueDelegate.
            </summary>
            <param name="registryaccessfunction">Function that sets and gets a stored boolean.</param>
            <example>
            MessageBoxDNS dialog = new MessageBoxDNS(new MessageBoxDNS.RegistryValueDelegate(MyFunction));
            dialog.Show(this, "Warning: Something", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
            </example>
        </member>
        <member name="P:DigitalProduction.Forms.MessageBoxDNS.DNSCheckBoxText">
            <summary>
            The string shown in the check box at the bottom of the message box.  A default is normally used to simplify usage and
            promote continuity for all message boxes shown.  Read/write.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the MessageBoxDefaultButton values the specifies the default button for the message box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies which icon to display in the message box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
            <param name="caption">The text to display in the title bar of the message box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.WndCreated(System.Object,MsdnMag.CbtEventArgs)">
            <summary>
            Window created.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.WndDestroyed(System.Object,MsdnMag.CbtEventArgs)">
            <summary>
            Window destroyed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.WndActivated(System.Object,MsdnMag.CbtEventArgs)">
            <summary>
            Window activated.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.DefaultDialogResult(System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Determines what the default dialog result should be for a message box with the specified buttons and default button.  Used
            when the message box is not displayed because the Do Not Show check box was previously checked.
            </summary>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="defaultButton"></param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.DestroyWindow(System.IntPtr)">
            <summary>
            Destroy a windows.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>
            Get an item on a dialog.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="id">ID of dialog item.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.GetWindowRect(System.IntPtr,DigitalProduction.Forms.MessageBoxDNS.RECT)">
            <summary>
            Get rectangle of the window.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="rc">Rectangle to store info in.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.GetClientRect(System.IntPtr,DigitalProduction.Forms.MessageBoxDNS.RECT)">
            <summary>
            Get rectangle of client.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="rc">Rectangle to store info in.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Move window.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <param name="bRepaint"></param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.ScreenToClient(System.IntPtr,DigitalProduction.Forms.MessageBoxDNS.POINT)">
            <summary>
            Convert a screen point to a client point.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="pt">Point to convert.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS._MessageBox(System.IntPtr,System.String,System.String,System.Int32)">
            <summary>
            Windows message box.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="text">Text.</param>
            <param name="caption">Caption.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Send a message to a window.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="msg">Message to send.</param>
            <param name="wParam"></param>
            <param name="lParam"></param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.CreateWindowEx(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Create a window.  Imported from user32.dll.  Returns a Windows handle to created window.
            </summary>
            <param name="dwExStyle">Extended window style.</param>
            <param name="lpClassName">Registered class name.</param>
            <param name="lpWindowName">Window name.</param>
            <param name="dwStyle">Window style.</param>
            <param name="x">Horizontal position of window.</param>
            <param name="y">Vertical position of window.</param>
            <param name="nWidth">Window width.</param>
            <param name="nHeight">Window height.</param>
            <param name="hWndParent">Handle to parent or owner window.</param>
            <param name="hMenu">Menu handle or child identifier.</param>
            <param name="hInstance">Handle to application instance.</param>
            <param name="lpParam">Window-creation data.</param>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxDNS.POINT">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.POINT.x">
            <summary>X position of window.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.POINT.y">
            <summary>Y position of window.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxDNS.RECT">
            <summary>
            Rectangle.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.RECT.left">
            <summary>Left position of window.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.RECT.top">
            <summary>Top position of window.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.RECT.right">
            <summary>Right position of window.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.RECT.bottom">
            <summary>Bottom position of window.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.StatusBarWithProgress">
            <summary>
            A status bar that contains a progress bar.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.StatusBarWithProgress.ProgressBar">
            <summary>Progress bar displayed on the status bar.</summary>
        </member>
        <member name="M:DigitalProduction.Forms.StatusBarWithProgress.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.StatusBarWithProgress.SetProgressBarPanel">
            <summary>
            Set the panel number that the status bar is to appear in.  Panels use zeroth based numbering.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.StatusBarWithProgress.Reposition(System.Object,System.Windows.Forms.StatusBarDrawItemEventArgs)">
            <summary>
            Handles repositioning of form.
            </summary>
            <param name="sender">Sender</param>
            <param name="sbdevent">Event arguments.</param>
        </member>
        <member name="T:DigitalProduction.Forms.WindowFollower">
            <summary>
            Allows a non-modal (does not block input to form that called it) to minimize and maximize the
            same as the dialog that called it.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Set position of window.
            </summary>
            <param name="hWnd">Windows handle of window.</param>
            <param name="hWndInsertAfter">Handle of window to insert after.</param>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="cx">cx.</param>
            <param name="cy">cy.</param>
            <param name="uFlags">Flags.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
            Constructor.
            </summary>
            <param name="master">The main window or application.</param>
            <param name="slave">The follower dialog or window.</param>
        </member>
        <member name="P:DigitalProduction.Forms.WindowFollower.CloseSlaveWithMaster">
            <value>
            Close the slave when the master closes if true.
            </value>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.MasterResize(System.Object,System.EventArgs)">
            <summary>
            Called when the master is resized.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.SlaveResize(System.Object,System.EventArgs)">
            <summary>
            Called when the slave is resized.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.MasterClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the master is closing.  Closes slave is the CloseSlaveWithMaster is true.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.SlaveClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the slave is closing.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.MasterActivated(System.Object,System.EventArgs)">
            <summary>
            Called when the master is activated.  Sets the slave window as the second highest window.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.SlaveActivated(System.Object,System.EventArgs)">
            <summary>
            Called when the slave is activated.  Sets the master window as the second highest window.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguements.</param>
        </member>
        <member name="T:DigitalProduction.Forms.WindowStateManager">
            <summary>
            Stores the state of the window.  I.e. position, size, minimized, et cetera.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.#ctor(DigitalProduction.Registry.FormWinRegistryAccess)">
            <summary>
            Constructor.
            </summary>
            <param name="regaccess">Registry access for this application.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.DoInstallaltion">
            <summary>
            Install function used by the delegate to do installation work.  Primarily used for debugging a setup
            routine should handle normal installation.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.OnResize(System.Object,System.EventArgs)">
            <summary>
            Handles a window resize in case the window is going to be maximized or minimized.  Stores what
            the "normal" values are.
            </summary>
            <param name="sender">Sender.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.OnMove(System.Object,System.EventArgs)">
            <summary>
            Handles a window movement so that the new position is saved.
            </summary>
            <param name="sender">Object that sent the message.</param>
            <param name="eventArgs">Parameters</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.OnClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles saving all required information to the registry on the closing of the window.
            </summary>
            <param name="sender">Object that sent the message.</param>
            <param name="eventArgs">Cancel event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.OnLoad(System.Object,System.EventArgs)">
            <summary>
            Restores values from the registry when the form loads.
            </summary>
            <param name="sender">Object that sent the message.</param>
            <param name="eventArgs">Parameters</param>
        </member>
        <member name="T:DigitalProduction.Generic.MappingList`2">
            <summary>
            Stores a matrix (2 dimensional array) of data which can be accessed by an enumeration, but the data does not have
            to be stored in the matrix in the same order as the items in the enumeration are defined.
            </summary>
            <typeparam name="TKey">Enumeration type used as a key to access data.</typeparam>
            <typeparam name="TData">Type of data to store in the matrix.</typeparam>
        </member>
        <member name="M:DigitalProduction.Generic.MappingList`2.#ctor">
            <summary>
            Parameterless constructor for serialization.
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.MappingList`2.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="activeKeys">List of active keys, in the order that they are contained in the data.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingList`2.#ctor(DigitalProduction.Generic.MappingList{`0,`1})">
            <summary>
            Copy constructor.
            </summary>
            <param name="original">Copy source.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingList`2.#ctor(DigitalProduction.Generic.MappingList{`0,`1},System.Collections.Generic.List{`0})">
            <summary>
            Subset extractor constructor.
            </summary>
            <param name="original">Copy source.</param>
            <param name="activeKeysToExtract">List of active keys, in the order that they are contained in the data, to be copied from the original.</param>
        </member>
        <member name="P:DigitalProduction.Generic.MappingList`2.NumberOfKeys">
            <summary>
            Total number of keys available in the enumeration used for TKey.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingList`2.ActiveKeys">
            <summary>
            List of keys which we have data for.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingList`2.NumberOfActiveKeys">
            <summary>
            Number of the keys that we have data for.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingList`2.Map">
            <summary>
            Map which specifies where data is in the data array.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingList`2.Data">
            <summary>
            Raw data.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingList`2.Item(`0)">
            <summary>
            Brackets operator used to access data by it's key type.
            </summary>
            <param name="key">Which set of data to get.</param>
        </member>
        <member name="P:DigitalProduction.Generic.MappingList`2.Item(System.Int32)">
            <summary>
            Brackets operator used to get data by its index.  Generally this would be used in a loop where are need to go over all
            the data without concern for exactly what data is in what position.
            </summary>
            <param name="index">Index of data to get.</param>
        </member>
        <member name="P:DigitalProduction.Generic.MappingList`2.NumberOfEntries">
            <summary>
            Length of the data (number of elements for each TKey).
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.MappingList`2.IsActiveKey(`0)">
             <summary>
             Specifies if the TKey is active (has data associated with it).
            
             Returns true is data exists for the key time, false otherwise.
             </summary>
             <param name="key">TKey to check.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingList`2.Set(System.Collections.Generic.List{`1})">
            <summary>
            Adds a set of data entries to the back of the data.
            </summary>
            <param name="entries">Set of data, one entry per each active key type, in the same order as the active key types.</param>
        </member>
        <member name="T:DigitalProduction.Generic.MappingMatrix`2">
            <summary>
            Stores a matrix (2 dimensional array) of data which can be accessed by an enumeration, but the data does not have
            to be stored in the matrix in the same order as the items in the enumeration are defined.
            </summary>
            <typeparam name="TKey">Enumeration type used as a key to access data.</typeparam>
            <typeparam name="TData">Type of data to store in the matrix.</typeparam>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.#ctor">
            <summary>
            Parameterless constructor for serialization.
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="activeKeys">List of active keys, in the order that they are contained in the data.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.#ctor(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="activeKeys">List of active keys, in the order that they are contained in the data.</param>
            <param name="initialSize">Initial size of the container.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.InitializeFromActiveKeys(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Initialization.
            </summary>
            <param name="activeKeys">List of active keys, in the order that they are contained in the data.</param>
            <param name="initialSize">Initial size of data container.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.#ctor(DigitalProduction.Generic.MappingMatrix{`0,`1})">
            <summary>
            Copy constructor.
            </summary>
            <param name="original">Copy source.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.#ctor(DigitalProduction.Generic.MappingMatrix{`0,`1},System.Collections.Generic.List{`0})">
            <summary>
            Subset extractor constructor.
            </summary>
            <param name="original">Copy source.</param>
            <param name="activeKeysToExtract">List of active keys, in the order that they are contained in the data, to be copied from the original.</param>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.NumberOfKeys">
            <summary>
            Total number of keys available in the enumeration used for TKey.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.ActiveKeys">
            <summary>
            List of keys which we have data for.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.NumberOfActiveKeys">
            <summary>
            Number of the keys that we have data for.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.Map">
            <summary>
            Map which specifies where data is in the data array.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.Data">
            <summary>
            Raw data.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.Item(`0)">
            <summary>
            Brackets operator used to access data by it's key type.
            </summary>
            <param name="key">Which set of data to get.</param>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.Item(System.Int32)">
            <summary>
            Brackets operator used to get data by its index.  Generally this would be used in a loop where are need to go over all
            the data without concern for exactly what data is in what position.
            </summary>
            <param name="index">Index of data to get.</param>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.NumberOfEntries">
            <summary>
            Length of the data (number of elements for each TKey).
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.IsActiveKey(`0)">
            <summary>
            Specifies if the TKey is active (has data associated with it).
            </summary>
            <param name="key">TKey to check.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.Add(System.Collections.Generic.List{`1})">
            <summary>
            Adds a set of data entries to the back of the data.
            </summary>
            <param name="entries">Set of data, one entry per each active key type, in the same order as the active key types.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.RemoveRanges(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            Removes sections of the data.  Much more efficient that RemoveRange for removing multiple ranges.
            </summary>
            <param name="indexesToRemove">Which sections to be removed.</param>
        </member>
        <member name="T:DigitalProduction.Generic.ObjectFactory`2">
            <summary>
            Summary description for ObjectFactory.
            </summary>
        </member>
        <member name="T:DigitalProduction.Generic.ObjectFactory`2.CreateDelegate">
            <summary>Create delegate.</summary>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.Register``1(`0)">
            <summary>
            Register a class with the object factory.
            </summary>
            <param name="key">Key used to retrieve the new object from.</param>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.Register``1(`0,DigitalProduction.Generic.ObjectFactory{`0,`1}.CreateDelegate)">
            <summary>
            Register a class with the object factory.
            </summary>
            <param name="key">Key used to retrieve the new object from.</param>
            <param name="creator">CreateDelegate used to create the SpecificProduct.</param>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.Create(`0)">
            <summary>
            Create a class associated with a given key.
            </summary>
            <param name="key">Key used to retrieve the new object from.</param>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.GetArrayOfKeys">
            <summary>
            Get an array of keys.
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.GetListOfKeys">
            <summary>
            Get a list of keys.
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.Creator``1">
            <summary>
            Does the actual creation of a new object.  Returns a new object (subclassed from GeneralProduct) of
            in the form of the super class (base class) type.
            </summary>
            <typeparam name="SpecificType">Subclass type to return.</typeparam>
        </member>
        <member name="T:DigitalProduction.Graphics.ColorMapping">
             <summary>
             A class for generating color maps.
            
             Notes:
             https://betterfigures.org/2015/06/23/picking-a-colour-scale-for-scientific-graphics/
             </summary>
        </member>
        <member name="M:DigitalProduction.Graphics.ColorMapping.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Graphics.ColorMapping.MorelandCoolToWarm(System.Double[])">
            <summary>
            Converts a list of doubles to a list of colors.  Maps values from 0 to 1 to a cool to warm space.
            </summary>
            <param name="values">A list of unit doubles (doubles that range from 0 =&lt; x &gt;= 1.0).</param>
        </member>
        <member name="M:DigitalProduction.Graphics.ColorMapping.MorelandCoolToWarm(System.Collections.Generic.List{System.Double})">
            <summary>
            Converts a list of doubles to a list of colors.  Maps values from 0 to 1 to a cool to warm space.
            </summary>
            <param name="values">A list of unit doubles (doubles that range from 0 =&lt; x &gt;= 1.0).</param>
        </member>
        <member name="M:DigitalProduction.Graphics.ColorMapping.MorelandCoolToWarm(System.Double)">
             <summary>
             A mapping of a value from 0 to 1 into a cool to warm color space.
            
             Based on mapping proposed by Kenneth Moreland.
             http://www.kennethmoreland.com/color-maps/
             </summary>
             <param name="x">Scalar to map.</param>
        </member>
        <member name="M:DigitalProduction.Graphics.ColorMapping.ScaleFromUnityTo256Color(System.Double)">
            <summary>
            A mapping of a double ranged from 0 to 1 into an int in the range of 0 to 255.
            </summary>
            <param name="scalar">Value to convert.</param>
        </member>
        <member name="T:DigitalProduction.IO.DriveType">
            <summary>
            Drive types for computer.
            
            The "Description" attribute can be accessed using Reflection to get a string representing the enumeration type.
            
            The "Length" enumeration can be used in loops as a convenient way of terminating a loop that does not have to be changed if
            the number of items in the enumeration changes.  The "Length" enumeration must be the last item.
            for (int i = 0; i &lt; (int)EnumType.Length; i++) {...}
            </summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.NotFound">
            <summary>Unknown.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.Removable">
            <summary>Removable drive.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.Fixed">
            <summary>Fixed drive.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.RemoteDisk">
            <summary>Remote drive.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.CD">
            <summary>CD or DVD drive.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.RamDisk">
            <summary>Ramdisk.</summary>
        </member>
        <member name="T:DigitalProduction.IO.ValidFileNameOptions">
            <summary>
            Options for controlling what determines if a file name is valid or not.
            </summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameOptions.RequirePathToExist">
            <summary>Specifies if the path is required to exist for the file name to be valid.  The default is false.</summary>
        </member>
        <member name="M:DigitalProduction.IO.ValidFileNameOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:DigitalProduction.IO.ValidFileNameResult">
            <summary>
            Enumeration that specifies the result of checking a file name for validity.
            
            The "Description" attribute can be accessed using Reflection to get a string representing the enumeration type.
            
            The "Length" enumeration can be used in loops as a convenient way of terminating a loop that does not have to be changed if
            the number of items in the enumeration changes.  The "Length" enumeration must be the last item.
            for (int i = 0; i &lt; (int)EnumType.Length; i++) {...}
            </summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.Valid">
            <summary>File name is valid.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.ZeroLength">
            <summary>A string of zero length (or all spaces) was specified.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.TooLong">
            <summary>File name is too long.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.InvalidCharacters">
            <summary>Characters not allowed by the system were used.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.PathDoesNotExist">
            <summary>Path does not exist.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.FileNameNotProvided">
            <summary>File name was not provided / file name starts with a "dot."</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.DeviceName">
            <summary>The first few characters must not match any known device names.</summary>
        </member>
        <member name="T:DigitalProduction.IO.Path">
            <summary>
            Additional path utilities.
            </summary>
        </member>
        <member name="M:DigitalProduction.IO.Path.GetVolumeInformation(System.String,System.Text.StringBuilder,System.Int64,System.Int64,System.Int64,System.Int64,System.Text.StringBuilder,System.Int64)">
             <summary>
             Get information about volume.  Imported from kernel32.dll.  Returns 0 if failed and not zero if succeeded.
             </summary>
             <param name="PathName">String of the drive letter to get the volume label of.</param>
             <param name="VolumeName"></param>
             <param name="VolumeNameSize"></param>
             <param name="VolumeSerialNumber"></param>
             <param name="MaximumComponentLength"></param>
             <param name="FileSystemFlags"></param>
             <param name="FileSystemName"></param>
             <param name="FileSystemNameSize"></param>
             <example>
             StringBuilder volumename = new StringBuilder(256);
             long serialnumber= new long();
             long maxcomponetlength = new long();
             long systemflags = new long();
             StringBuilder systemname = new StringBuilder(256);
             long returnvalue= new long();
            
             returnvalue = GetVolumeInformation(@"D:\", volumename, 256, serialnumber, maxcomponetlength,	systemflags, systemname, 256);
             if (returnvalue != 0) // do something.
             else // do nothing.
             </example>
        </member>
        <member name="M:DigitalProduction.IO.Path.GetFullPathWithoutExtension(System.String)">
            <summary>
            Gets the full path and root file name.  Strips the file extension.
            </summary>
            <param name="path">Path (directory and file name).</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.ChangeFileExtension(System.String,System.String)">
            <summary>
            Replace the file extension on a path with a new extension.
            </summary>
            <param name="path">Path (file name with extension, with or with out directory)</param>
            <param name="newExtension">New file extension.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.InsertSubdirectory(System.String,System.String)">
            <summary>
            Insert a subdirectory name between the directory part and the file part of the path.
            </summary>
            <param name="path">Path (directory and file name).</param>
            <param name="subdirectory">Name of the subdirectory to insert.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.PathIsWritable(System.String)">
            <summary>
            Checks that a path is savable.  It has to be a valid file name, the directory must exist, and
            it cannot already be an existing, write only file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:DigitalProduction.IO.Path.GetDirectory(System.String)">
            <summary>
            Get directory from the path.  Checks that the directory exists also.  Returns the directory from the path if it exists, otherwise a blank string.
            </summary>
            <param name="path">Path to get the directory from.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.IsRelativePath(System.String)">
            <summary>
            Returns true if the path is a relative path.
            </summary>
            <param name="path">Path to test.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.ConvertToAbsolutePath(System.String)">
            <summary>
            If the path is relative, it converts it to absolute by using the current directory as the base.
            </summary>
            <param name="path">Path to convert.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.ChangeDirectoryDotDot(System.String)">
            <summary>
            Alters a directory name (given as a string) in a manner that is similar to what the DOS
            command "CD.." does to the current directory at the DOS prompt (gives the parent directory).
            </summary>
            <param name="directory">The starting directory as a string.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.ChangeDirectoryDotDot(System.String,System.Int32)">
            <summary>
            Alters a directory name (given as a string) in a manner that is similar to what the DOS
            command "CD.." does to the current directory at the DOS prompt (gives the parent directory).
            </summary>
            <param name="directory">The starting directory as a string.</param>
            <param name="levels">Number of levels to move up.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.DirectoryCopy(System.String,System.String)">
            <summary>
            Copies a directory from one location to another.  Does not copy subdirectories.
            </summary>
            <param name="sourcedirname">Path to the source directory.</param>
            <param name="destdirname">Path to the destination directory.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.DirectoryCopy(System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory from one location to another.
            </summary>
            <param name="sourcedirname">Path to the source directory.</param>
            <param name="destdirname">Path to the destination directory.</param>
            <param name="copysubdirs">Specifies if the subdirectories should be copied.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.DirectoryCopy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a directory from one location to another.
            </summary>
            <param name="sourcedirname">Path to the source directory.</param>
            <param name="destdirname">Path to the destination directory.</param>
            <param name="copysubdirs">Specifies if the subdirectories should be copied.</param>
            <param name="overwrite">Overwrite existing files.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.DirectoryCopy(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a directory from one location to another.
            </summary>
            <param name="sourcedirname">Path to the source directory.</param>
            <param name="destdirname">Path to the destination directory.</param>
            <param name="copysubdirs">Specifies if the subdirectories should be copied.</param>
            <param name="overwrite">Overwrite existing files.</param>
            <param name="excludedfiles">A list of files not to copy.</param>
            <remarks>
            	Original code taken from the MSDN library.
            	URL: http://msdn.microsoft.com/en-us/library/bb762914.aspx
            	Modified to provided additional functionality.
            </remarks>
        </member>
        <member name="M:DigitalProduction.IO.Path.GetTemporaryDirectory(System.String)">
            <summary>
            Creates a new directory in the user's temporary folder.  The subFolder is used to organize
            several temporary directories.  The final result will be similar in form to:
            C:\Users\user\AppData\Local\Temp\subFolder\temp.tmp\
            </summary>
        </member>
        <member name="M:DigitalProduction.IO.Path.GetTemporaryDirectory">
            <summary>
            Creates a new directory in the user's temporary folder.
            </summary>
        </member>
        <member name="M:DigitalProduction.IO.Path.DiskDriveType(System.String)">
            <summary>
            Returns the type of drive represented by the string.
            </summary>
            <param name="drive">String of the drive letter to get the type of drive of.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.DiskDriveName(System.String)">
            <summary>
            Returns the volume name of a disk drive.
            </summary>
            <param name="drive">String of the drive letter to get the volume label of.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.IsValidFileName(System.String)">
             <summary>
             Checks to insure that a file name passes the criteria to be valid.
            
             Returns a ValidFileNameResult result that indicates if the file name is valid, or if not, what the error was.
             </summary>
             <param name="file">File name to check.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.IsValidFileName(System.String,DigitalProduction.IO.ValidFileNameOptions)">
             <summary>
             Checks to insure that a file name passes the criteria to be valid.
            
             Returns a ValidFileNameResult result that indicates if the file name is valid, or if not, what the error was.
             </summary>
             <param name="file">File name to check.</param>
             <param name="options">Options to controlling what determines if a file name is valid or not.</param>
        </member>
        <member name="T:DigitalProduction.Mathmatics.Constants">
            <summary>
            
            </summary>
        </member>
        <member name="F:DigitalProduction.Mathmatics.Constants.GravityInImperial">
            <summary>Gravity in ft/s^2.</summary>
        </member>
        <member name="F:DigitalProduction.Mathmatics.Constants.GravityInSI">
            <summary>Gravity in m/s^2.</summary>
        </member>
        <member name="T:DigitalProduction.Mathmatics.Conversion">
            <summary>
            Class for converting units.
            </summary>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.DegreesToRadians(System.Double)">
            <summary>
            Convert degrees to radians.
            </summary>
            <param name="angle">Angle to convert.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.DegreesToRadians(System.Collections.Generic.List{System.Double})">
            <summary>
            Convert degrees to radians.
            </summary>
            <param name="angles">Angle to convert.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.DegreesToRadiansInPlace(System.Collections.Generic.List{System.Double})">
            <summary>
            Convert degrees to radians.
            </summary>
            <param name="angles">Angle to convert.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.RadiansToDegrees(System.Double)">
            <summary>
            Convert radians to degrees.
            </summary>
            <param name="angle">Angle to convert.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.RadiansToDegrees(System.Collections.Generic.List{System.Double})">
            <summary>
            Convert radians to degrees.
            </summary>
            <param name="angles">Angle to convert.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.RadiansToDegreesInPlace(System.Collections.Generic.List{System.Double})">
            <summary>
            Convert radians to degrees.
            </summary>
            <param name="angles">Angle to convert.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.RadiansToRevolutions(System.Collections.Generic.List{System.Double})">
            <summary>
            Convert radians to degrees.
            </summary>
            <param name="angles">Angle to convert.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.RadiansToRevolutionsInPlace(System.Collections.Generic.List{System.Double})">
            <summary>
            Convert radians to degrees.
            </summary>
            <param name="angles">Angle to convert.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.RpmToHertz(System.Double)">
            <summary>
            Convert RPM to Hertz (where 1 revolution in 1 second is 1 Hertz).  Hertz would be
            equivalent to 1 revolution per 1 second.
            </summary>
            <param name="rpm">Revolutions per minute.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.FeetToInches(System.Double)">
            <summary>
            Convert feet to inches.
            </summary>
            <param name="feet">Feet.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.InchesToFeet(System.Double)">
            <summary>
            Convert inches to feet.
            </summary>
            <param name="inches">Inches.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.FrequencyToPeriod(System.Double)">
            <summary>
            Convert frequency (Hertz) into period (seconds).
            </summary>
            <param name="frequency">Frequency in Hertz.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.PeriodToFrequency(System.Double)">
            <summary>
            Convert frequency Hertz into period (seconds).
            </summary>
            <param name="period">Period in seconds.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.AngularFrequencyToFrequency(System.Double)">
            <summary>
            Convert angular frequency (radians) to frequency (Hertz).
            </summary>
            <param name="angularFrequency">Angular frequency in radians.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.FrequencyToAngularFrequency(System.Double)">
            <summary>
            Convert frequency (Hertz) to angular frequency (radians).
            </summary>
            <param name="frequency">Angular frequency in radians.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.AngularFrequencyToPeriod(System.Double)">
            <summary>
            Convert angular frequency (radians) to frequency (Hertz).
            </summary>
            <param name="angularFrequency">Angular frequency in radians.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.PeriodToAngularFrequency(System.Double)">
            <summary>
            Convert angular frequency (radians) to frequency (Hertz).
            </summary>
            <param name="period">Angular frequency in radians.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.FloorToIntegerPart(System.Double,System.Int32)">
            <summary>
            Round down the integer part (characteristic) of a number.
            </summary>
            <param name="value">Value to round.</param>
            <param name="position">Integer position to round to.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Conversion.CeilingToIntegerPart(System.Double,System.Int32)">
            <summary>
            Round up the integer part (characteristic) of a number.
            </summary>
            <param name="value">Value to round.</param>
            <param name="position">Integer position to round to.</param>
        </member>
        <member name="T:DigitalProduction.Mathmatics.Geometry">
            <summary>
            
            </summary>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Geometry.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Geometry.AreaOfCircleByDiameter(System.Double,System.Double)">
            <summary>
            Area of a ring (circle with inner concentric circle subtracted).
            </summary>
            <param name="outerdiameter">Diameter of outer circle.</param>
            <param name="innerdiameter">Diameter of inner circle.</param>
        </member>
        <member name="T:DigitalProduction.Mathmatics.NormalizationType">
            <summary>
            Add summary here.
            
            The "Description" attribute can be accessed using Reflection to get a string representing the enumeration type.
            
            The "Length" enumeration can be used in loops as a convenient way of terminating a loop that does not have to be changed if
            the number of items in the enumeration changes.  The "Length" enumeration must be the last item.
            for (int i = 0; i &lt; (int)EnumType.Length; i++) {...}
            </summary>
        </member>
        <member name="F:DigitalProduction.Mathmatics.NormalizationType.Euclidean">
            <summary>Euclidian.</summary>
        </member>
        <member name="F:DigitalProduction.Mathmatics.NormalizationType.MaxValueIsHalfPi">
            <summary>The maximum value is specified as input.</summary>
        </member>
        <member name="F:DigitalProduction.Mathmatics.NormalizationType.MaxValueIsOne">
            <summary>All numbers are divided by the maximum value.</summary>
        </member>
        <member name="F:DigitalProduction.Mathmatics.NormalizationType.MaxAbsoluteValueIsOne">
            <summary>All numbers are divided by the maximum absolute value.</summary>
        </member>
        <member name="T:DigitalProduction.Mathmatics.Precision">
            <summary>
            Math utilities.
            </summary>
        </member>
        <member name="F:DigitalProduction.Mathmatics.Precision._epsilon">
            <summary>The epsilon, threshold using for determining whether two numbers are equal or not.</summary>
        </member>
        <member name="P:DigitalProduction.Mathmatics.Precision.Epsilon">
            <summary>
            The allowed threshold that are numbers are allowed to be different, but still considered equal.
            </summary>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.IsZero(System.Double)">
            <summary>
            Determines if the input is zero within the allotted precision.
            </summary>
            <param name="val">The value to check.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.IsZero(System.Double,System.Double)">
            <summary>
            Determines if the input is zero within the allotted precision.
            </summary>
            <param name="val">The value to check.</param>
            <param name="epsilon">The specified precision.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.LessThan(System.Double,System.Double)">
            <summary>
            Determines if the first input is greater than the second input within the allotted precision.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.LessThan(System.Double,System.Double,System.Double)">
            <summary>
            Determines if the first input is less than the second input within the allotted precision.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The specified precision.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.LessThanZero(System.Double)">
            <summary>
            Determines if the input is less than zero within the allotted precision.
            </summary>
            <param name="val">The value to check.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.LessThanZero(System.Double,System.Double)">
            <summary>
            Determines if the input is less than zero within the allotted precision.
            </summary>
            <param name="val">The value to check.</param>
            <param name="epsilon">The specified precision.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.GreaterThan(System.Double,System.Double)">
            <summary>
            Determines if the first input is greater than the second input within the allotted precision.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.GreaterThan(System.Double,System.Double,System.Double)">
            <summary>
            Determines if the first input is greater than the second input within the allotted precision.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The specified precision.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.GreaterThanZero(System.Double)">
            <summary>
            Determines if the input is greater than zero within the allotted precision.
            </summary>
            <param name="val">The value to check.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.GreaterThanZero(System.Double,System.Double)">
            <summary>
            Determines if the input is greater than zero within the allotted precision.
            </summary>
            <param name="val">The value to check.</param>
            <param name="epsilon">The specified precision.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.Equal(System.Double,System.Double)">
            <summary>
            Determines two numbers are equal within the default precision.
            </summary>
            <param name="val1">The first value.</param>
            <param name="val2">The second value.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.Equal(System.Double,System.Double,System.Double)">
            <summary>
            Determines two numbers are equal within the specified precision.
            </summary>
            <param name="val1">The first value.</param>
            <param name="val2">The second value.</param>
            <param name="epsilon">Precision required to consider the two value equal.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.NotEqual(System.Double,System.Double)">
            <summary>
            Determines two numbers are equal within the default precision.
            </summary>
            <param name="val1">The first value.</param>
            <param name="val2">The second value.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.NotEqual(System.Double,System.Double,System.Double)">
            <summary>
            Determines two numbers are equal within the specified precision.
            </summary>
            <param name="val1">The first value.</param>
            <param name="val2">The second value.</param>
            <param name="epsilon">Precision required to consider the two value equal.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.CeilingWithPrecision(System.Double,System.Int32)">
            <summary>
            Round up to the specified decimal place.
            </summary>
            <param name="val">Value to round.</param>
            <param name="roundTo">Precision to round to, e.g. 10, 100, 1000, et cetera.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Precision.FloorWithPrecision(System.Double,System.Int32)">
            <summary>
            Round down to the specified decimal place.
            </summary>
            <param name="val">Value to round.</param>
            <param name="roundTo">Precision to round to, e.g. 10, 100, 1000, et cetera.</param>
        </member>
        <member name="T:DigitalProduction.Mathmatics.SignalProcessing">
            <summary>
            
            </summary>
        </member>
        <member name="M:DigitalProduction.Mathmatics.SignalProcessing.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Mathmatics.SignalProcessing.Derivative(System.Collections.Generic.List{System.DateTime},System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType,System.Collections.Generic.List{System.Double})">
            <summary>
            Numerical derivative.  Differentiates the input function with respect to time.
            </summary>
            <param name="time">List of DateTimes.</param>
            <param name="intervalType"></param>
            <param name="function">Function (values) to take the derivative of.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.SignalProcessing.ConvertTimeSpanToInterval(System.TimeSpan,System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            Convert a TimeSpan to a double representing the requested interval type.
            </summary>
            <param name="timeSpan">TimeSpan to convert.</param>
            <param name="intervalType">Desired output units (what time length is TimeSpan expressed in?).  For example 14 days or 2 week.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.SignalProcessing.Unwrap(System.Collections.Generic.List{System.Double})">
            <summary>
            Unwrap the phase angle of an input array.
            </summary>
            <param name="angles">Input angles (in radians).</param>
        </member>
        <member name="T:DigitalProduction.Mathmatics.Statistics">
            <summary>
            
            </summary>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Statistics.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Statistics.Average(System.Double[])">
            <summary>
            List extension to calculate the average of an array of values.
            </summary>
            <param name="values">Values to the average of.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Statistics.Average(System.Double[],System.Double[])">
            <summary>
            List extension to calculate the average of two arrays of values.
            </summary>
            <param name="xValues">X values to the average of.</param>
            <param name="yValues">Y values to the average of.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Statistics.Covariance(System.Double[],System.Double[])">
            <summary>
            List extension to calculate the covariance of a List of Vector2D.
            </summary>
            <param name="xValues">X values to find the covariance of.</param>
            <param name="yValues">Y values to find the covariance of.</param>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Statistics.PearsonCorrelationCoefficient(System.Double[],System.Double[])">
            <summary>
            Calculations the Person Correlation Coefficient which is a measure of how close a set of data points
            is to linear.  The coefficient (p) is in the range of
            
            -1 &lt;= p &lt;= 1
            
            Where -1 is perfect negative correlation (negative slope).
            
            The coefficient is given by: 
            \rho _{X,Y}={\frac {\operatorname {cov} (X,Y)}{\sigma _{X}\sigma _{Y}}}} {\displaystyle \rho _{X,Y}={\frac {\operatorname {cov} (X,Y)}{\sigma _{X}\sigma _{Y}}}}
            
            p = cov(x,y) / stddev(x) / stddev(y)
            </summary>
            <param name="xValues">X values.</param>
            <param name="yValues">Y values.</param>
            <remarks>
            This could be calculated using the covariance and standard deviation functions in the class, however, that requires extra loops through the data,
            so we will do things a little more manually here.  It doesn't add much code and only requires 1 loop instead of 3.
            </remarks>
        </member>
        <member name="M:DigitalProduction.Mathmatics.Statistics.StandardDeviation(System.Double[])">
            <summary>
            List extension to calculate the covariance of a List of Vector2D.
            </summary>
            <param name="values">Values to the covariance of.</param>
        </member>
        <member name="T:DigitalProduction.Numerics.Precision">
            <summary>
            A set of methods related to the use of finite precision numbers.
            </summary>
        </member>
        <member name="T:DigitalProduction.Numerics.PrecisionSettings">
            <summary>
            Settings used for methods related to finite precision calculations.
            </summary>
        </member>
        <member name="M:DigitalProduction.Numerics.PrecisionSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.Numerics.PrecisionSettings.DoubleZeroThreshold">
            <summary>
            Threshold for determining if a double value is zero.
            </summary>
        </member>
        <member name="P:DigitalProduction.Numerics.PrecisionSettings.FloatZeroThreshold">
            <summary>
            Threshold for determining if a float value is zero.
            </summary>
        </member>
        <member name="T:DigitalProduction.Project.CreationMethod">
             <summary>
             Specifies how a project was created.  Allows determination of creation method so behavior can change based on it.
            
             The "Description" attribute can be accessed using Reflection to get a string representing the enumeration type.
            
             The "Length" enumeration can be used in loops as a convenient way of terminating a loop that does not have to be changed if
             the number of items in the enumeration changes.  The "Length" enumeration must be the last item.
             for (int i = 0; i &lt; (int)EnumType.Length; i++) {...}
             </summary>
        </member>
        <member name="F:DigitalProduction.Project.CreationMethod.Deserialized">
            <summary></summary>
        </member>
        <member name="F:DigitalProduction.Project.CreationMethod.Instantiated">
            <summary>The number of types/items in the enumeration.</summary>
        </member>
        <member name="T:DigitalProduction.Project.ProjectSavingEventHandler">
            <summary>
            Delegate used for saving Projects.
            </summary>
            <param name="projectCompressor">ProjectCompressor used to zip project files.</param>
        </member>
        <member name="T:DigitalProduction.Project.ProjectOpenedEventHandler">
            <summary>
            Delegate used for openning Projects.
            </summary>
            <param name="projectExtractor">ProjectExtractor used to unzip project files.</param>
        </member>
        <member name="T:DigitalProduction.Project.IModifiable">
            <summary>
            Interface for a class that can track when it has been modified, saved, and raise an event when it gets modified.
            </summary>
        </member>
        <member name="E:DigitalProduction.Project.IModifiable.OnModifiedChanged">
            <summary>
            Event for when the object was modified.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.IModifiable.Modified">
            <summary>
            Specifies if the project has been modified since last being saved/loaded.
            </summary>
        </member>
        <member name="T:DigitalProduction.Project.LargeProject">
            <summary>
            
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.LargeProject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.LargeProject.Serialize(DigitalProduction.Threading.ProgressDialogThreadingHelper)">
            <summary>
            Writes a Project file (compressed file containing all the project's files).  Uses a ProjectCompressor to zip all files.  An
            event of RaiseOnSavingEvent fires allowing other files to be added to the project.
            
            The this.Path must be set and represent a valid path or this method will throw an exception.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the projects path is not set or not valid.</exception>
        </member>
        <member name="T:DigitalProduction.Project.Project">
            <summary>
            Base class for a Project.  Provides common functionality.
            </summary>
        </member>
        <member name="E:DigitalProduction.Project.Project.OnModifiedChanged">
            <summary>
            Occurs when data in the project is modified.  Used, for example, to enable/disable the Save button based on whether the project
            has been modified and needs to be saved.
            </summary>
        </member>
        <member name="E:DigitalProduction.Project.Project.OnInitialized">
            <summary>
            Occurs when the project is initialized.  This event occurs every time a project is created, regardless of how it is created.  For
            example, this event will fire if the project is created by instantiating a new instance of a project (new Project) or if the Project
            is created by deserializing from disk.
            </summary>
        </member>
        <member name="E:DigitalProduction.Project.Project.OnOpened">
            <summary>
            Occurs after a Project has been deserialized from disk.  Note that this event does not fire when creating a new instance of a
            Project (new Project()).  Hook into this event to perform any operations or GUI setup required to be performed after opening
            a Project from disk.
            </summary>
        </member>
        <member name="E:DigitalProduction.Project.Project.OnSaving">
            <summary>
            Occurs before a Project is serialized to disk.  Hook into this event to save related file for the project or any other events
            that must occur before a project can be serialized.
            </summary>
        </member>
        <member name="E:DigitalProduction.Project.Project.OnClosed">
            <summary>
            Occurs after a Project has been closed.
            </summary>
        </member>
        <member name="F:DigitalProduction.Project.Project._path">
            <summary>This is the location of the project file that this file was serialized from and will be serialized to.</summary>
        </member>
        <member name="F:DigitalProduction.Project.Project._description">
            <summary>Project description.</summary>
        </member>
        <member name="M:DigitalProduction.Project.Project.#ctor">
            <summary>
            Default constructor for designer.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.Project.Version">
            <summary>
            Software version.  We will use it as the file version as well.  Force the file and software versions to match or throw an exception.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.Project.Path">
            <summary>
            The location of the project file that this file was serialized from and will be serialized to.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.Project.FileName">
            <summary>
            Project file name with the file extension.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.Project.Saveable">
            <summary>
            Specifies is the project is currently savable.  Check before calling "Save()".  Calling "Save" with "Savable" false will throw an exception.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.Project.Initialized">
            <summary>
            Specifies that the project has finished initialization and should fire events from this point forward.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.Project.Modified">
            <summary>
            Specifies if the project has been modified since last being saved/loaded.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.Project.IsClosed">
            <summary>
            Specifies if the project has been closed.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.Project.RaiseOnModifiedChangedEvent">
            <summary>
            Access for manually firing event for external sources.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.Project.RaiseOnInitializedEvent">
            <summary>
            Access for manually firing event for external sources.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.Project.RaiseOnOpenedEvent">
            <summary>
            Access for manually firing event for external sources.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.Project.RaiseOnSavingEvent(DigitalProduction.Project.ProjectCompressor)">
            <summary>
            Access for manually firing event for external sources.
            </summary>
            <param name="projectCompressor">ProjectCompressor used for saving the project.</param>
        </member>
        <member name="M:DigitalProduction.Project.Project.RaiseOnClosedEvent">
            <summary>
            Access for manually firing event for external sources.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.Project.Close">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.Project.Deserialize``1(DigitalProduction.Project.ProjectExtractor)">
            <summary>
            Create an instance from a file.
            </summary>
            <param name="projectExtractor">ProjectExtractor used to unzip project files.</param>
        </member>
        <member name="M:DigitalProduction.Project.Project.Deserialize``1(System.String)">
            <summary>
            Create an instance from a file.
            </summary>
            <param name="path">The file to read from.</param>
        </member>
        <member name="M:DigitalProduction.Project.Project.Serialize">
             <summary>
             Writes a Project file (compressed file containing all the project's files).  Uses a ProjectCompressor to zip all files.  An
             event of RaiseOnSavingEvent fires allowing other files to be added to the project.
            
             The this.Path must be set and represent a valid path or this method will throw an exception.
             </summary>
             <exception cref="T:System.InvalidOperationException">Thrown when the projects path is not set or not valid.</exception>
        </member>
        <member name="M:DigitalProduction.Project.Project.SerializeWorker">
            <summary>
            Main work of serialization and compressing project files.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.Project.Serialize(System.String)">
            <summary>
            Write this object to a file to the provided path.
            </summary>
            <param name="path">Path (full path and filename) to write to.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the projects path is not set or not valid.</exception>
        </member>
        <member name="M:DigitalProduction.Project.Project.DeserializationInitialization">
            <summary>
            Initialize data structure after reading from XML file.
            
            When desearializing, the pointers to other objects are not valid and events are not hooked up so we need to do that
            manually.
            </summary>
        </member>
        <member name="T:DigitalProduction.Project.ProjectCompressor">
            <summary>
            Compresses project files into a single zipped file.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectCompressor.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectCompressor.RegisterFile(System.String)">
             <summary>
             Register a file with the compression.
            
             Registering the file means that the compressor expects a file with the same file name in the directory being compressed.
            
             Returns the full path to the location where the file being compressed is located.  This is the path to the extraction directory combined with the file name.
             </summary>
             <param name="path">File name or path to a file.  The path, other than the file name is stripped from the argument.  Only the file name is used.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectCompressor.CompressFiles">
             <summary>
             Compress the files.
            
             Attempts to delete a file that is in the destination path, if it exists.
             </summary>
        </member>
        <member name="T:DigitalProduction.Project.ProjectExtractor">
            <summary>
            A class that extracts project files from a zipped archive.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectExtractor.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="path">Path to Project file (zipped) to extract.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectExtractor.#ctor(System.String,System.String)">
            <summary>
            Constructor for extracting to a defined directory.
            </summary>
            <param name="filePath">Path to Project file (zipped) to extract.</param>
            <param name="extractionDirectory">Directory to use for extraction.</param>
        </member>
        <member name="P:DigitalProduction.Project.ProjectExtractor.Project">
            <summary>
            Get the project.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.ProjectExtractor.ExtractionDirectory">
            <summary>
            Directory where the files were extracted to.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectExtractor.GetFilePath(System.String)">
             <summary>
             Combines the file name provided with the path of the extraction directory.
            
             Checks to ensure the file was part of the zip file.
            
             This does not have any directory or path as part of the file name.  If directory information is provided, it is stripped out.
             </summary>
             <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectExtractor.ExtractFiles">
            <summary>
            Unzips the Project file and saves the list of file names in the Project.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectExtractor.ExtractAndDeserializeProject``1(System.String)">
            <summary>
            Extract a project archive and deserialize the project.
            </summary>
            <typeparam name="T">Type of project that is to be deserialized.</typeparam>
            <param name="path">Path to the project file archive to deserialize.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectExtractor.ExtractFiles(System.String)">
            <summary>
            Extracts files (only, does not deserialize project).  The extraction occurs in a temporary directory.
            </summary>
            <param name="path">Path to Project file (zipped) to extract.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectExtractor.ExtractFiles(System.String,System.String)">
            <summary>
            Extracts files (only, does not deserialize project).  The extraction into the directory specified
            as an argument.
            </summary>
            <param name="filePath">Path to Project file (zipped) to extract.</param>
            <param name="extractionDirectory">Directory to extract the files into.</param>
        </member>
        <member name="T:DigitalProduction.Project.ProjectFileTools">
            <summary>
            Tools for simplifying the handling of project files.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.ExtractFiles(System.Windows.Forms.Form,System.String)">
            <summary>
            Display a SelectFileDialog to allow a user to pick a project archive file to extract, then extract all the files in the archive into a directory
            with the same name as a sub directory of the directory the project archive is in.
            </summary>
            <param name="owner">Owner form to show the FileSelectDialog in front of.</param>
            <param name="filterString">Filter string used to select the project archive with.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.ExtractFilesIntoSameDirectory(System.String)">
            <summary>
            Extract the files inside of a project archive into a directory with the same name as a sub directory of the directory the project archive is in.
            </summary>
            <param name="filePath">Path to the project archive.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.GetListOfFiles(System.String)">
            <summary>
            Get a list of the files inside of the project archive.
            </summary>
            <param name="filePath">Path to the project archive.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.UpdateProjectFile(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            Shows a Form that allows the user to specify how a file inside of a project archive should be updated (which file and which XSLT file is to be used).
            </summary>
            <param name="owner">Owner form to show the FileSelectDialog in front of.</param>
            <param name="projectFilterString">Filter string to use when selecting a project archive.</param>
            <param name="xsltFilesDirectory">Directory that contains XSLT files that can be used for the transformation of the project file.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.UpdateProjectFileBasic(System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Shows a Form that allows the user to specify how a file inside of a project archive should be updated (which file and which XSLT file is to be used).
            </summary>
            <param name="owner">Owner form to show the FileSelectDialog in front of.</param>
            <param name="internalFileName">Internal file name (file extracted from project zip file).</param>
            <param name="projectFilterString">Filter string to use when selecting a project archive.</param>
            <param name="xsltFilesDirectory">Directory that contains XSLT files that can be used for the transformation of the project file.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.BasicUpdateProjectFile(System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Shows a Form that allows the user to specify how a file inside of a project archive should be updated (which file and which XSLT file is to be used).
            </summary>
            <param name="owner">Owner form to show the FileSelectDialog in front of.</param>
            <param name="internalFilename">Internal file name (file extracted from project zip file).</param>
            <param name="projectFilterString">Filter string to use when selecting a project archive.</param>
            <param name="xsltFilesDirectory">Directory that contains XSLT files that can be used for the transformation of the project file.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.ViewProjectSourceCode(DigitalProduction.Project.Project)">
            <summary>
            Serialize the Project file and open it in notepad.  Can be useful for debugging.
            </summary>
            <param name="project">Project to view.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.ViewProjectSourceCode(System.String)">
            <summary>
            Extract the Project file and open it in notepad.  Can be useful for debugging.
            </summary>
            <param name="filePath">Path to file.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectFileTools.UpdateProjectFile(DigitalProduction.Project.ProjectUpdateData,System.Boolean)">
            <summary>
            Use an XSLT file to update one of the files inside of a project archive.
            </summary>
            <param name="projectUpdateData">Project update information.</param>
            <param name="replaceExistingFile">If true, the existing file is replaced with the new.  If false, the new file will be named the same as the old with a suffix added.</param>
        </member>
        <member name="T:DigitalProduction.Project.ProjectUpdateData">
            <summary>
            Holds information on updating project files.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectUpdateData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectUpdateData.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="projectFile">File name (no path) of file inside of the project archive to apply transformation to.</param>
            <param name="selectedProjectItem">Project item selected.</param>
            <param name="xsltFile">XSLT file to use to do the transformation.</param>
        </member>
        <member name="P:DigitalProduction.Project.ProjectUpdateData.ProjectPath">
            <summary>
            Path to zipped project archive.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.ProjectUpdateData.SelectedProjectItem">
            <summary>
            File name (no path) of file inside of the project archive to apply transformation to.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.ProjectUpdateData.XsltFile">
            <summary>
            XSLT file to use to do the transformation.
            </summary>
        </member>
        <member name="T:DigitalProduction.Project.ProjectZipperBase">
             <summary>
            
             </summary>
        </member>
        <member name="F:DigitalProduction.Project.ProjectZipperBase._path">
            <summary>
            Full path and file name to the input/output zip archive.
            </summary>
        </member>
        <member name="F:DigitalProduction.Project.ProjectZipperBase._extractionDirectory">
            <summary>
            Temporary directy for extracting files.
            </summary>
        </member>
        <member name="F:DigitalProduction.Project.ProjectZipperBase._files">
            <summary>
            Files in the project zip file.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectZipperBase.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="path">Path to Project file (zipped) to extract.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectZipperBase.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="filePath">Path to Project file (zipped) to extract.</param>
            <param name="extractionDirectory">Directory to extract the files into.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectZipperBase.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectZipperBase.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and
            unmanaged resources can be disposed.  If disposing equals false, the method has been called by the runtime
            from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="M:DigitalProduction.Project.ProjectZipperBase.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.  This destructor will run only if the Dispose method
            does not get called.  It gives your base class the opportunity to finalize.  Do not provide
            destructors in types derived from this class.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.ProjectZipperBase.Path">
            <summary>
            Full path and file name to the input/output zip archive.
            </summary>
        </member>
        <member name="P:DigitalProduction.Project.ProjectZipperBase.Files">
            <summary>
            Files in the archive.
            </summary>
        </member>
        <member name="M:DigitalProduction.Project.ProjectZipperBase.GetTemporaryDirectory">
            <summary>
            Creates a new directory in the user's temporary folder.
            </summary>
        </member>
        <member name="T:DigitalProduction.DataBase.DataBaseAccess">
            <summary>
            Summary description for DataBaseAccess.
            </summary>
        </member>
        <member name="F:DigitalProduction.DataBase.DataBaseAccess._dataadapter">
            <summary>Data adapter.</summary>
        </member>
        <member name="F:DigitalProduction.DataBase.DataBaseAccess.DataSet">
            <summary>Data set.</summary>
        </member>
        <member name="M:DigitalProduction.DataBase.DataBaseAccess.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="DataBaseLocation">Location of database to connect to.</param>
            <param name="Table">Table in the database to connect to.</param>
        </member>
        <member name="M:DigitalProduction.DataBase.DataBaseAccess.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DigitalProduction.DataBase.DataBaseAccess.GetDataConnection">
            <summary>
            Creates a connection to a table and fills the dataset.
            </summary>
        </member>
        <member name="M:DigitalProduction.DataBase.DataBaseAccess.GetTableNames(System.String)">
            <summary>
            Get the names of the tables in the database.
            </summary>
            <param name="databasepath">Path to database.</param>
        </member>
        <member name="T:DigitalProduction.Drawing.TextDrawing">
            <summary>
            A class to aid in drawing text.
            </summary>
        </member>
        <member name="M:DigitalProduction.Drawing.TextDrawing.#ctor(System.Drawing.Graphics)">
            <summary>
            Constructor.
            </summary>
            <param name="graphics">Graphics object to draw on.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.TextDrawing.#ctor(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Constructor.
            </summary>
            <param name="graphics">Graphics object to draw on.</param>
            <param name="font">Font to use when drawing.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.TextDrawing.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Brush)">
            <summary>
            Constructor.
            </summary>
            <param name="graphics">Graphics object to draw on.</param>
            <param name="font">Font to use when drawing.</param>
            <param name="brush">Brush to use when drawing.</param>
        </member>
        <member name="P:DigitalProduction.Drawing.TextDrawing.Graphics">
            <value>
            Graphics to draw on.
            </value>
        </member>
        <member name="P:DigitalProduction.Drawing.TextDrawing.Font">
            <value>
            Font to use when drawing.
            </value>
        </member>
        <member name="P:DigitalProduction.Drawing.TextDrawing.Brush">
            <value>
            Brush to use when drawing.
            </value>
        </member>
        <member name="M:DigitalProduction.Drawing.TextDrawing.DrawStringCenteredX(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Draw a string of text center horizontally between xstart and xstart+xwidth.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="xstart">Starting x position of area to center text in.</param>
            <param name="xwidth">Width of area to center text in.</param>
            <param name="y">Y position on graphics to draw text.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.TextDrawing.DrawStringRotated(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Draw a string of text at position x,y rotated angle degrees clockwise.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="angle">Angle, in degrees, to rotate text in clockwise direction.</param>
            <param name="x">X position on graphics to draw text.</param>
            <param name="y">Y position on graphics to draw text.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.TextDrawing.DrawStringRotatedCenteredX(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a string of text rotated angle degrees clockwise and centered between x and x+width in the new
            rotated frame.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="angle">Angle, in degrees, to rotate text in clockwise direction.</param>
            <param name="x">X position on graphics to draw text.</param>
            <param name="y">Y position on graphics to draw text.</param>
            <param name="width">Width of area to center text in.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.TextDrawing.CenterTextHorizontally(System.Drawing.Graphics,System.Drawing.Font,System.String,System.Single,System.Single)">
            <summary>
            Calculate the new X position needed to horizontally in the space between xstart and xstart+width.
            </summary>
            <param name="graphics">Graphics object text is going to be drawn on.</param>
            <param name="font">Font used to draw text.</param>
            <param name="text">Text to center.</param>
            <param name="xstart">X position text starts at.</param>
            <param name="width">Width of area to center text in.</param>
        </member>
        <member name="T:DigitalProduction.Gaming.PlayerBase`1">
            <summary>
            A Blackjack player.  The player is responsible for decision making for the hand.  It also
            contains the money the player has and a holder for the stats of the player.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.PlayerBase`1._score">
            <summary>The player's score.</summary>
        </member>
        <member name="M:DigitalProduction.Gaming.PlayerBase`1.#ctor(`0,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="score">Amount of money the player starts with.</param>
            <param name="name">Name of player.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.PlayerBase`1.#ctor(`0)">
            <summary>
            Constructor, name is set to "Anonymouns."
            </summary>
            <param name="score">Amount of money the player starts with.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.PlayerBase`1.#ctor">
            <summary>
            Constructor, name is set to "Anonymous" and money is set to 10,000.
            </summary>
        </member>
        <member name="P:DigitalProduction.Gaming.PlayerBase`1.Name">
            <value>
            Name of the player.  Read/write.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.PlayerBase`1.Score">
            <value>
            Player's score.  Read/write.
            </value>
        </member>
        <member name="T:DigitalProduction.Gaming.Shoe">
            <summary>
            Summary not provided for the class Shoe.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.Shoe.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Gaming.CardSuit">
            <summary>
            The suit of a cards.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardSuit.Clubs">
            <summary>Suit of the card is Clubs</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardSuit.Diamonds">
            <summary>Suit of the card is Diamonds.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardSuit.Hearts">
            <summary>Suit of the card is Hearts.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardSuit.Spades">
            <summary>Suit of the card is Spades.</summary>
        </member>
        <member name="T:DigitalProduction.Gaming.CardRank">
            <summary>
            The rank (face value) of cards.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Ace">
            <summary>The rank (face value) of the card is 1</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Two">
            <summary>The rank (face value) of the card is 2</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Three">
            <summary>The rank (face value) of the card is 3</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Four">
            <summary>The rank (face value) of the card is 4</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Five">
            <summary>The rank (face value) of the card is 5</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Six">
            <summary>The rank (face value) of the card is 6</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Seven">
            <summary>The rank (face value) of the card is 7</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Eight">
            <summary>The rank (face value) of the card is 8</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Nine">
            <summary>The rank (face value) of the card is 9</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Ten">
            <summary>The rank (face value) of the card is 10</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Jack">
            <summary>The rank (face value) of the card is Jack</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Queen">
            <summary>The rank (face value) of the card is Queen</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.King">
            <summary>The rank (face value) of the card is King</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.End">
            <summary>The rank of the card is not valid.</summary>
        </member>
        <member name="T:DigitalProduction.Gaming.Card">
            <summary>
            A simple class for holding a card.  Card face values are based on the rules of Blackjack.
            Derive a new class from this class is you need different values.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.Card._cardvalues">
            <summary>
            Array which is used to convert the face value of the card to a numeric value.  If these 
            are not the values for what ever type of game you are using this for then over write these
            in the derived class.  Must also override Value property.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.#ctor(DigitalProduction.Gaming.CardRank,DigitalProduction.Gaming.CardSuit)">
            <summary>
            Constructor.
            </summary>
            <param name="cardrank">Rank of card (face value).</param>
            <param name="cardsuit">Suit of card.</param>
        </member>
        <member name="P:DigitalProduction.Gaming.Card.Rank">
            <value>
            Get the rank of the card.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.Card.Suit">
            <value>
            Get the suit of the card.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.Card.Value">
            <value>
            Return the card's value based on the default card values (based on Blackjack rules).
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.Card.CardValues">
            <summary>
            The values (points) associated with the cards.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetCardSuit(System.String)">
            <summary>
            Convert a string to a CardSuit.  CardSuit associated with CardSuit if found, otherwise CardSuit.Clubs.
            </summary>
            <param name="cardsuit">String which represents the CardSuit.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetCardRank(System.String)">
            <summary>
            Convert a string to a CardRank.  CardRank associated with CardRank if found, otherwise CardRank.Ace.
            </summary>
            <param name="cardrank">String which represents the CardRank.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetCardValue(DigitalProduction.Gaming.CardRank)">
            <summary>
            Convert a card rank to a integer value.
            </summary>
            <param name="cardrank">CardRank to find the value of.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetCardRank(System.Int32)">
            <summary>
            Get the CardRank of a card based on the value of the card.  CardRank of CardValue if found, CardRank.End if not found.
            </summary>
            <param name="cardvalue">Value of card.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.CreateCards(System.Collections.ArrayList@,System.Int32)">
            <summary>
            Used to create "decks" of cards.  Cards are created in order and must be "shuffled."
            </summary>
            <param name="cards">Array to put cards in as they are created.</param>
            <param name="number_of_decks">Number of decks to created.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.CreateSpanishCards(System.Collections.ArrayList@,System.Int32)">
            <summary>
            Used to create Spanish "decks" of cards.  Spanish decks do not have the 10's in them.
            Cards are created in order and must be "shuffled."
            </summary>
            <param name="cards">Array to put cards in as they are created.</param>
            <param name="number_of_decks">Number of decks to created.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetHashCode">
            <summary>
            Hash code.
            </summary>
        </member>
        <member name="T:DigitalProduction.Gaming.CardsDLLAccess">
            <summary>
            Provides access to cards.dll on a Windows machine.  Handles initialization and destruction
            of resources and provides an easy to use interface.  This class can be used to draw cards from
            the class Card.cs located in this same library.
            </summary>
        </member>
        <member name="T:DigitalProduction.Gaming.CardsDLLAccess.BackStyle">
            <summary>
            Image to show on the backs of cards when they are face down.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.CrossHatch">
            <summary>CrossHatch in Windows XP; CrossHatch Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Sky">
            <summary>Sky in Windows XP; Weave 1 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Mineral">
            <summary>Mineral Windows XP; Weave 2 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Fish">
            <summary>Fish Windows XP; Robot Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Frog">
            <summary>Frog Windows XP; Flowers Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Flower">
            <summary>Flower Windows XP; Vine 1 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Island">
            <summary>Island Windows XP; Vine 2 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Squares">
            <summary>Squares Windows XP; Fish 1 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Magenta">
            <summary>Magenta Windows XP; Fish 2 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.DesertMoon">
            <summary>Desert Moon Windows XP; Shells Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Astronaut">
            <summary>Astronaut Windows XP; Castle Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Lines">
            <summary>Lines Windows XP; Island Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.ToyCars">
            <summary>ToyCars Windows XP; Cardhand Pre-Windows XP.</summary>
        </member>
        <member name="T:DigitalProduction.Gaming.CardsDLLAccess.PlaceHolder">
            <summary>
            Types of place holders where a stack of cards will go, but there isn't any now.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.PlaceHolder.X">
            <summary>X style place holder.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.PlaceHolder.O">
            <summary>O style place holder.</summary>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtInit(System.Int32@,System.Int32@)">
            <summary>
            Initializes the cards.dll library.  Returns true if successful, false if an error occurs.
            </summary>
            <param name="width">Width of cards in pixels.  Changing width doesn't seem to have an effect.</param>
            <param name="height">Height of cards in pixels.  Changing height doesn't seem to have an effect.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtTerm">
            <summary>
            Cleans up resources allocated with call to cdtInit().
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtDraw(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Draw a card.
            
             Returns true if successful, false if an error occurs.
             </summary>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="x">X location, in pixels, of the upper left corner of the card being drawn.</param>
             <param name="y">Y location, in pixels, of the upper left corner of the card being drawn.</param>
             <param name="card">Card to draw.  This depends on the mode.  See enumerations for more info.</param>
             <param name="mode">Mode to draw in.  See enumeration for more information.</param>
             <param name="color">
             Color to use when drawing card.
             </param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtDrawExt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Draw a card the size of dx and dy in pixels.  Warning - drawing cards at the non-standard size greatly distorts them.
            
             Returns true if successful, false if an error occurs.
             </summary>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="x">X location, in pixels, of the upper left corner of the card being drawn.</param>
             <param name="y">Y location, in pixels, of the upper left corner of the card being drawn.</param>
             <param name="dx">X size, in pixels, to draw the card.</param>
             <param name="dy">Y size, in pixels, to draw the card.</param>
             <param name="card">Card to draw.  This depends on the mode.  See enumerations for more info.</param>
             <param name="mode">Mode to draw in.  See enumeration for more information.</param>
             <param name="color">Color to use when drawing card.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtAnimate(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Animate a card back by displaying different frames.  This only works for some card backs.
            
             Returns true if successful, false if an error occurs.
             </summary>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="cardback">Card back to animate.  See enumerations for more information.</param>
             <param name="x">X location, in pixels, of the upper left corner of the card being drawn.</param>
             <param name="y">Y location, in pixels, of the upper left corner of the card being drawn.</param>
             <param name="frame">Frame to use in animation.  Different card backs have different number of frames.  See enumerations for more information.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.Dispose">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.Gaming.CardsDLLAccess.CardBackStyle">
            <value>
            Get or set the card back style.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.CardsDLLAccess.CardWidth">
            <value>
            Get the card drawing width in pixels.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.CardsDLLAccess.CardHeight">
            <value>
            Get the card drawing height in pixels.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.CardsDLLAccess.Color">
            <value>
            Color used in drawing.  Read/write.
            </value>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawCardFaceDown(System.IntPtr,System.Int32,System.Int32)">
             <summary>
             Draw a card face down (so back is showing).
            
             Returns true if successful, false if an error occurs.
             </summary>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="x">X position to draw card at (in pixels).</param>
             <param name="y">Y position to draw card at (in pixels).</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawCardFaceUp(System.IntPtr,DigitalProduction.Gaming.Card,System.Int32,System.Int32)">
             <summary>
             Draw a card face up.
            
             Returns true if successful, false if an error occurs.
             </summary>
             <remarks>
             The mode (FaceUp) used causes the cards in "cards.dll" to be drawn in A,A,A,A,2,2,2,...K,K format.
             </remarks>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="card">Card to draw.</param>
             <param name="x">X position to draw card at (in pixels).</param>
             <param name="y">Y position to draw card at (in pixels).</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawCardFaceUp(System.IntPtr,System.Int32,System.Int32,System.Int32)">
             <summary>
             Draw a card face up.
            
             Returns true if successful, false if an error occurs.
             </summary>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="card">Integer position in cards.dll of card to draw.</param>
             <param name="x">X position to draw card at (in pixels).</param>
             <param name="y">Y position to draw card at (in pixels).</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawNegativeCard(System.IntPtr,DigitalProduction.Gaming.Card,System.Int32,System.Int32)">
             <summary>
             Draw a card face up as a negative.
            
             Returns true if successful, false if an error occurs.
             </summary>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="card">Card to draw.</param>
             <param name="x">X position to draw card at (in pixels).</param>
             <param name="y">Y position to draw card at (in pixels).</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawNegativeCard(System.IntPtr,System.Int32,System.Int32,System.Int32)">
             <summary>
             Draw a card face up as a negative.
            
             Returns true if successful, false if an error occurs.
             </summary>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="card">Integer position in cards.dll of card to draw.</param>
             <param name="x">X position to draw card at (in pixels).</param>
             <param name="y">Y position to draw card at (in pixels).</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawX(System.IntPtr,System.Int32,System.Int32)">
             <summary>
             Draw a X card place holder.
            
             Returns true if successful, false if an error occurs.
             </summary>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="x">X position to draw card at (in pixels).</param>
             <param name="y">Y position to draw card at (in pixels).</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawO(System.IntPtr,System.Int32,System.Int32)">
             <summary>
             Draw a O card place holder.
            
             Returns true if successful, false if an error occurs.
             </summary>
             <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
             <param name="x">X position to draw card at (in pixels).</param>
             <param name="y">Y position to draw card at (in pixels).</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.CardDLLPosition(DigitalProduction.Gaming.CardRank,DigitalProduction.Gaming.CardSuit)">
            <summary>
            Returns the position in cards.dll that the card is at.
            </summary>
            <param name="rank">The rank (face value) of the card who's position is desired.</param>
            <param name="suit">The suit of the card who's position is desired.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.CardDLLPosition(DigitalProduction.Gaming.Card)">
            <summary>
            Returns the position in cards.dll that the card is at.
            </summary>
            <param name="card">The card who's position is desired.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.CardInDLLPosition(System.Int32)">
            <summary>
            Return a new Card which represents the card in a given position of the "cards.dll."
            </summary>
            <param name="position">Position in the "cards.dll" to create a card from.</param>
        </member>
        <member name="T:DigitalProduction.Reflection.AlternateNamesAttribute">
            <summary>
            An attribute to add additional names to a class, structure, or enumeration.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.AlternateNamesAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.AlternateNamesAttribute.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.Reflection.AlternateNamesAttribute.ShortName">
            <summary>
            Short name.
            </summary>
        </member>
        <member name="P:DigitalProduction.Reflection.AlternateNamesAttribute.LongName">
            <summary>
            Long name.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.AlternateNamesAttribute.GetName(DigitalProduction.Reflection.AlternateNameType)">
            <summary>
            Get a name by using the enumeration.
            </summary>
            <param name="nameType">Name type to get.</param>
        </member>
        <member name="T:DigitalProduction.Reflection.AlternateNameType">
             <summary>
             Types of alternate names.
            
             The "Description" attribute can be accessed using Reflection to get a string representing the enumeration type.
            
             We don't use the "Length" enumeration in this case because this enumeration type can be used in the control designer
             and we don't want it appearing, therefore allowing someone to select it even though it is not a valid design option.
             </summary>
        </member>
        <member name="F:DigitalProduction.Reflection.AlternateNameType.LongName">
            <summary>Long name.</summary>
        </member>
        <member name="F:DigitalProduction.Reflection.AlternateNameType.ShortName">
            <summary>Short name.</summary>
        </member>
        <member name="T:DigitalProduction.Reflection.Attributes">
             <summary>
             Get attributes.  Provide convenient access for common attribute properties.
            
            	Originally based on code written by skot:
            	http://www.codeproject.com/useritems/EnumDescriptionAttribute.asp
             </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDisplayName(System.Type)">
            <summary>
            Gets display name of an object.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDisplayName(System.Type,System.String)">
            <summary>
            Gets display name of an object.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <param name="defaultValue">Default value to use if the attribute is not found.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDisplayName(System.Object)">
            <summary>
            Gets display name of an object.
            </summary>
            <param name="instance">Instance of the object type to retrieve the Attribute from.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDisplayName(System.Object,System.String)">
            <summary>
            Gets display name of an object.
            </summary>
            <param name="instance">Instance of the object type to retrieve the Attribute from.</param>
            <param name="defaultValue">Default value to use if the attribute is not found.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDescription(System.Type)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDescription(System.Type,System.String)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <param name="defaultValue">Default value to return if description is not found.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDescription(System.Object)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="instance">Value of the enumeration.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDescription(System.Object,System.String)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="instance">Value of the enumeration.</param>
            <param name="defaultValue">Default value to return if description is not found.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAlternateName(System.Type,DigitalProduction.Reflection.AlternateNameType)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <param name="nameType">Which name to return.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAlternateName(System.Type,DigitalProduction.Reflection.AlternateNameType,System.String)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <param name="nameType">Which name to return.</param>
            <param name="defaultValue">Default value to return if description is not found.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAlternateName(System.Object,DigitalProduction.Reflection.AlternateNameType)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="instance">Value of the enumeration.</param>
            <param name="nameType">Which name to return.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAlternateName(System.Object,DigitalProduction.Reflection.AlternateNameType,System.String)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="instance">Value of the enumeration.</param>
            <param name="nameType">Which name to return.</param>
            <param name="defaultValue">Default value to return if description is not found.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAliases(System.Object)">
            <summary>
            Gets a list of names provided by the Alias attribute.
            </summary>
            <param name="instance">Instance of the object to retrieve the aliases from.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAliases(System.Type)">
            <summary>
            Gets a list of names provided by the Alias attribute.
            </summary>
            <param name="type">Type of object to retrieve the aliases from.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAttribute``1(System.Object)">
            <summary>
            Get the first Attribute of type "T" for the Type that the provided object is.
            </summary>
            <typeparam name="T">Type of attribute to get (not type of the object).</typeparam>
            <param name="instance">Instance of the object type to retrieve the Attribute from.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAttribute``1(System.Type)">
            <summary>
            Get the first Attribute of type "T" for the Type that the provided object is.
            </summary>
            <typeparam name="T">Type of attribute to get (not type of the object).</typeparam>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAllAttributes``1(System.Object)">
            <summary>
            Gets a list of Attributes of type "T" for the Type that the provided object is.
            </summary>
            <typeparam name="T">Type of attribute to get (not type of the object).</typeparam>
            <param name="instance">Instance of the object type to retrieve the Attribute from.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAllAttributes``1(System.Type)">
            <summary>
            Get a list of Attributes of the specified Type.
            </summary>
            <typeparam name="T">Type of attribute to get (not type of the object).</typeparam>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
        </member>
        <member name="T:DigitalProduction.Reflection.Enumerations">
            <summary>
            Enumeration utilities.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Enumerations.NumberOfDefinedItems``1">
            <summary>
            Gets the number of items defined within an enumeration type.
            </summary>
            <typeparam name="T">Enumeration type that items are defined in.</typeparam>
        </member>
        <member name="M:DigitalProduction.Reflection.Enumerations.GetAllDescriptionAttributesForType``1">
            <summary>
            Gets all the Description attributes for an enumeration type.
            </summary>
            <typeparam name="T">Enum type.</typeparam>
        </member>
        <member name="M:DigitalProduction.Reflection.Enumerations.GetAllDescriptionAttributesForTypeAsArray``1">
            <summary>
            Gets all the Description attributes for an enumeration type.
            </summary>
            <typeparam name="T">Enum type.</typeparam>
        </member>
        <member name="M:DigitalProduction.Reflection.Enumerations.GetInstanceFromDescription``1(System.String)">
            <summary>
            Searches and returns the instance/enum value with the corresponding Description Attribute.
            </summary>
            <typeparam name="T">Type of the enum.</typeparam>
            <param name="description">Description string to search for.</param>
        </member>
        <member name="T:DigitalProduction.Reflection.Assembly">
            <summary>
            Summary not provided for the class Assembly.
            </summary>
        </member>
        <member name="P:DigitalProduction.Reflection.Assembly.LibraryLocation">
            <summary>
            Location of the library assembly (including the name of the library).
            </summary>
            <remarks>
            This is the same as System.Reflection.Assembly.GetExecutingAssembly().Location called from within the library.
            Note that this will NOT return the location of an executable that references this library.  To get that use
            the System version or use the Location() function in this library and provide the executables assembly as input.
            </remarks>
        </member>
        <member name="P:DigitalProduction.Reflection.Assembly.LibraryPath">
            <summary>
            Path of the library (does not include the name of the library).
            </summary>
            <remarks>
            If the library and any executable that calls it are installed in the same directory, this can be used
            as a shortcut to get the path of the running executable.
            </remarks>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Location">
            <summary>
            Location of the executing assembly (including the name of the assembly).
            </summary>
            <remarks>This is the same as System.Reflection.Assembly.GetExecutingAssembly().Location.</remarks>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Location(System.Reflection.Assembly)">
            <summary>
            Location of the assembly (including the name of the assembly).
            </summary>
            <remarks>This is the same as System.Reflection.Assembly.GetExecutingAssembly().Location.</remarks>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Path">
            <summary>
            Path of the executing assembly (does not include the name of the assembly).
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Path(System.Reflection.Assembly)">
            <summary>
            Path of the assembly (does not include the name of the assembly).
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Title">
            <summary>
            Get the calling assembly's title.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Title(System.Reflection.Assembly)">
            <summary>
            Get the assembly title.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Version">
            <summary>
            Get the calling assembly's version.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Version(System.Reflection.Assembly)">
            <summary>
            Get the assembly version.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Description">
            <summary>
            Get the calling assembly's description.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Description(System.Reflection.Assembly)">
            <summary>
            Get the assembly description.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Product">
            <summary>
            Get the calling assembly's product name.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Product(System.Reflection.Assembly)">
            <summary>
            Get the assembly product name.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Copyright">
            <summary>
            Get the calling assembly's copyright.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Copyright(System.Reflection.Assembly)">
            <summary>
            Get the assembly copyright.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Company">
            <summary>
            Get the calling assembly's company.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Company(System.Reflection.Assembly)">
            <summary>
            Get the assembly company.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.GetSubclassTypesOf(System.Type)">
            <summary>
            Get a List of Types that are subclasses of the superclass.  Searches the entire assembly the superclass is defined in.
            </summary>
            <param name="superclassType">Superclass/base class to search for subclass/derived class types for.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.GetConcreteSubclassTypesOf(System.Type)">
            <summary>
            Get a List of Types that are concrete (non-abstract) subclasses of the superclass.  Searches the entire assembly the superclass is defined in.
            </summary>
            <param name="superclassType">Superclass/base class to search for subclass/derived class types for.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.GetInterfaceImplementationsTypesOf(System.Type)">
            <summary>
            Get a List of Types that are implementations of the interface.  Searches the entire assembly the interface is defined in.
            </summary>
            <param name="superclassType">Interface to search for implementations of.</param>
        </member>
        <member name="T:DigitalProduction.Registry.DialogWinRegistryAccess">
            <summary>
            DialogWinRegistry class.  Similar to the FormWinRegistryAccess class (and, indeed, is inherited from it), but
            is instead used for dialog boxes or similar forms opened from a main application form.  The primary difference
            being that this class stores it's setting is a sub-key of the main application key.
            </summary>
        </member>
        <member name="F:DigitalProduction.Registry.DialogWinRegistryAccess._dialogName">
            <summary>Dialog box name.</summary>
        </member>
        <member name="M:DigitalProduction.Registry.DialogWinRegistryAccess.#ctor(DigitalProduction.Forms.DPMForm,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Registry.DialogWinRegistryAccess.#ctor(DigitalProduction.Forms.DPMForm,System.String,DigitalProduction.Delegates.InstallEventHandler)">
            <summary>
            Constructor when the dialog box that is the owner is the top level dialog box.
            </summary>
            <param name="owner">DPMForm that is using this to access to the registry.</param>
            <param name="dialogName">The name of the dialog box.  Also used as a key to store values in the registry.</param>
            <param name="installHandler">Installation handler to add to the Install event.</param>
        </member>
        <member name="M:DigitalProduction.Registry.DialogWinRegistryAccess.AppKey">
             <summary>
             Get the registry key associated with the application name.
            
             Returns the registry key if it could be accessed, null if an error occurs.
             </summary>
        </member>
        <member name="T:DigitalProduction.Registry.FormPosition">
            <summary>
            Add summary here.
            
            The "Description" attribute can be accessed using Reflection to get a string representing the enumeration type.
            
            The "Length" enumeration can be used in loops as a convenient way of terminating a loop that does not have to be changed if
            the number of items in the enumeration changes.  The "Length" enumeration must be the last item.
            for (int i = 0; i &lt; (int)EnumType.Length; i++) {...}
            </summary>
        </member>
        <member name="F:DigitalProduction.Registry.FormPosition.Left">
            <summary>Position of left side of form.</summary>
        </member>
        <member name="F:DigitalProduction.Registry.FormPosition.Top">
            <summary>Position of the top of the form.</summary>
        </member>
        <member name="F:DigitalProduction.Registry.FormPosition.Width">
            <summary>Width of the form.</summary>
        </member>
        <member name="F:DigitalProduction.Registry.FormPosition.Height">
            <summary>Height of the form.</summary>
        </member>
        <member name="T:DigitalProduction.Registry.WinRegistryAccess">
             <summary>
             WinRegistryAccess Class. A generic registry access to read and write to a Windows registry.
             It does common tasks for all application, such as get the CompanyKey and the ApplicationKey.
             A specific application should derive it's own registry writer from this to save any other
             specific data.
            
             Note that the functions in this class cannot be static because most of them depend on the specific
             _owner of this instance.  Since this class is to be general enough to be used for all DPM applications
             the type of the owner is not know before hand.  Moreover, several instances of this class could
             exist at one time, each working for a different type of application.
            
             This class supports multiple levels of access to the registry.  That is, this class can be used
             to access a set of registry keys and values for a form that is owned by another form.  If this
             WinRegistryAccess has a parent it requests the AppKey from it's parent.  If that WinRegistryAccess
             has a parent it does the same, and so on.
             </summary>
        </member>
        <member name="E:DigitalProduction.Registry.WinRegistryAccess.Install">
            <summary>
            Install event.
            </summary>
        </member>
        <member name="F:DigitalProduction.Registry.WinRegistryAccess._registryEntries">
            <summary>Used to create a list of entries such that they can all be easily read or written at one time if needed.</summary>
        </member>
        <member name="F:DigitalProduction.Registry.WinRegistryAccess._companyName">
            <summary>Company name.</summary>
        </member>
        <member name="F:DigitalProduction.Registry.WinRegistryAccess._softwareName">
            <summary>Software/application name.</summary>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="companyName">Company name used to access the company registry key.</param>
            <param name="softwareName">Software name used to access the software registry key.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.#ctor(DigitalProduction.Registry.WinRegistryAccess)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.#ctor(System.String,System.String,DigitalProduction.Delegates.InstallEventHandler)">
            <summary>
            Constructor when the dialog box that is the owner is the top level dialog box.
            </summary>
            <param name="companyName">Company name used to access the company registry key.</param>
            <param name="softwareName">Software name used to access the software registry key.</param>
            <param name="installHandler">Installation handler to add to the Install event.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.Initialize(System.String,System.String)">
            <summary>
            Common construction code.
            </summary>
            <param name="companyName">Company name used to access the company registry key.</param>
            <param name="softwareName">Software name used to access the software registry key.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.OnInstall">
            <summary>
            Install function used by the delegate to do installation work.  Primarily used for debugging a setup
            routine should handle normal installation.
            </summary>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.CreateRegistryEntries">
            <summary>
            Default creation of registry entries.  Derived classes should override this to
            create there own entries.
            </summary>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.WriteRegistryEntries">
            <summary>
            Write all the registry entries stored in the registry entries array list.
            </summary>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.ReadRegistryEntries">
            <summary>
            Read all the registry entries stored in the registry entries array list.
            </summary>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetRegEntry(System.Int32)">
            <summary>
            Get a registry entry from the array.  Returns the registry entry associated with index if possible, otherwise null.
            </summary>
            <param name="index">index of the registry entry desired.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValueAsBoolean(System.Int32)">
            <summary>
            Get a value from the registry entries stored in array list and return
            as a boolean.
            </summary>
            <param name="index">Index in array list that entry is stored at.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValueAsInt32(System.Int32)">
            <summary>
            Get a value from the registry entries stored in array list and return
            as an int.
            </summary>
            <param name="index">Index in array list that entry is stored at.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValueAsString(System.Int32)">
            <summary>
            Get a value from the registry entries stored in array list and return
            as a string.
            </summary>
            <param name="index">Index in array list that entry is stored at.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValueAsDouble(System.Int32)">
            <summary>
            Get a value from the registry entries stored in array list and return
            as a double.
            </summary>
            <param name="index">Index in array list that entry is stored at.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value of a registry entry stored in the array list.
            </summary>
            <param name="index">Index in array list that entry is stored at.</param>
            <param name="setvalue">Value to set.</param>
        </member>
        <member name="P:DigitalProduction.Registry.WinRegistryAccess.Installed">
            <value>
            Checks the registry key to see if the installed key has been set to true.  This
            is primarily used to check to see if Install needs to be run when doing debugging.
            </value>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.CompanyKey">
             <summary>
             Get the registry key associated with the company name.
            
             Returns the registry key if it could be accessed, null if an error occurs.
             </summary>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.AppKey">
             <summary>
             Get the registry key associated with the application name.
            
             Returns the registry key if it could be accessed, null if an error occurs.
             </summary>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
            Get a registry value.  Returns the value stored in registry value if it exists, otherwise return the default value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
            <summary>
            Get a registry value.  Returns the value stored in registry value if it exists, otherwise return the default value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.Object)">
            <summary>
            Get a registry value.  Returns the value stored in registry value if it exists, otherwise return the default value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.Double)">
            <summary>
            Get a registry value.  Returns the value stored in registry value if it exists, otherwise return the default value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Get a registry value.  Returns the value stored in registry value if it exists, otherwise return the default value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.DateTime)">
            <summary>
            Get a registry value.  Returns the value stored in registry value if it exists, otherwise return the default value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.SetValue(Microsoft.Win32.RegistryKey,System.String,System.Object)">
            <summary>
            Set a registry value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="setvalue">Value to set the registry value to.</param>
        </member>
        <member name="M:DigitalProduction.Registry.WinRegistryAccess.RaiseInstallEvent">
            <summary>
            Trigger the installation event.  Primarily used to simplify debugging.
            </summary>
        </member>
        <member name="T:DigitalProduction.Registry.RegistryEntryDelegate">
            <summary>
            Template for function to access the registry key.
            </summary>
        </member>
        <member name="T:DigitalProduction.Registry.RegistryEntry">
            <summary>
            Holds data associated with a registry function and a function that gets they key
            where the registry entry is stored.
            </summary>
        </member>
        <member name="F:DigitalProduction.Registry.RegistryEntry.RegKeyFunction">
            <summary>
            Function used to access registry key.
            </summary>
        </member>
        <member name="M:DigitalProduction.Registry.RegistryEntry.#ctor(DigitalProduction.Registry.RegistryEntryDelegate,System.String,System.Object)">
            <summary>
            Use constructor to assign name and key function, plus to simplify creation.
            </summary>
            <param name="keyfunction">
            A function of type RegistryEntryDelegate which returns the RegistryKey
            that the RegistryEntry is on.
            </param>
            <param name="name">Name of the RegistryEntry.  Used as the name of the RegistryValue.</param>
            <param name="val">Default value to use.</param>
        </member>
        <member name="P:DigitalProduction.Registry.RegistryEntry.Name">
            <value>
            Get or set name.
            </value>
        </member>
        <member name="P:DigitalProduction.Registry.RegistryEntry.Value">
            <value>
            Get or set a registry value.
            </value>
        </member>
        <member name="T:DigitalProduction.Registry.FormWinRegistryAccess">
            <summary>
            FormRegistryAccess Class. A class that handles additional registry access functions associated with application level
            forms.  For example, this class handles storing and retrieving of the window state of a form.
            </summary>
        </member>
        <member name="F:DigitalProduction.Registry.FormWinRegistryAccess._registryentries">
            <summary>
            Used to create a list of entries such that they can all be easily read or written at
            one time if needed.
            </summary>
        </member>
        <member name="F:DigitalProduction.Registry.FormWinRegistryAccess._owner">
            <summary>
            Digital Production Management base Form.  This allows commonality amongst all DPM applications.
            </summary>
        </member>
        <member name="M:DigitalProduction.Registry.FormWinRegistryAccess.#ctor(DigitalProduction.Forms.DPMForm)">
            <summary>
            Constructor when the dialog box that is the owner is the top level dialog box.
            </summary>
            <param name="owner">DPMForm that is using this to access to the registry.</param>
        </member>
        <member name="M:DigitalProduction.Registry.FormWinRegistryAccess.#ctor(DigitalProduction.Forms.DPMForm,DigitalProduction.Delegates.InstallEventHandler)">
            <summary>
            Constructor when the dialog box that is the owner is the top level dialog box.
            </summary>
            <param name="owner">DPMForm that is using this to access to the registry.</param>
            <param name="installHandler">Installation handler to add to the Install event.</param>
        </member>
        <member name="M:DigitalProduction.Registry.FormWinRegistryAccess.OnInstall">
            <summary>
            Install function used by the delegate to do installation work.  Primarily used for debugging a setup
            routine should handle normal installation.
            </summary>
        </member>
        <member name="P:DigitalProduction.Registry.FormWinRegistryAccess.Owner">
            <summary>
            Get the owner of this registry access.
            </summary>
        </member>
        <member name="M:DigitalProduction.Registry.FormWinRegistryAccess.OptionsKey">
             <summary>
             Return the key that holds the options.
            
             Returns the registry key if it could be accessed, null if an error occurs.
             </summary>
        </member>
        <member name="M:DigitalProduction.Registry.FormWinRegistryAccess.WindowStateKey">
             <summary>
             Return the key that holds window state information.
            
             Returns the registry key if it could be accessed, null if an error occurs.
             </summary>
        </member>
        <member name="P:DigitalProduction.Registry.FormWinRegistryAccess.WindowPosition">
            <value>
            Gets or sets the window position information from the registry.  Takes an array of
            four integers which represent the left, top, width, and height of the window.
            </value>
        </member>
        <member name="P:DigitalProduction.Registry.FormWinRegistryAccess.WindowState">
            <value>
            Gets or sets the window state information from the registry.
            </value>
        </member>
        <member name="M:DigitalProduction.Registry.FormWinRegistryAccess.RecentFilesKey">
             <summary>
             Return the key that holds recently used files.
            
             Returns the registry key if it could be accessed, null if an error occurs.
             </summary>
        </member>
        <member name="P:DigitalProduction.Registry.FormWinRegistryAccess.NumberOfRecentlyUsedFiles">
            <value>
            Gets or sets the size of the recently used menus from the registry.  This is the number of menu
            items displayed, not the number of menu items allowed.
            </value>
        </member>
        <member name="M:DigitalProduction.Registry.FormWinRegistryAccess.GetRecentlyUsedFiles(System.UInt32)">
             <summary>
             Gets the recently used files from the registry.
            
             Returns an array of strings the size of "numberoffiles".  Blank strings are returned for any entries that do not exist.
             </summary>
             <param name="numberoffiles">The number of strings to return.  If an entry is not found for a file, a blank string is returned.</param>
        </member>
        <member name="M:DigitalProduction.Registry.FormWinRegistryAccess.SetRecentlyUsedFiles(System.String[])">
            <value>
            Sets the the recently used menus from the registry.
            </value>
        </member>
        <member name="T:DigitalProduction.SystemDpm.UniqueId">
            <summary>
            An item that needs to have a unique id.  Specifically, this is useful for when an instance of
            a class has to have an unique ID unique.  This is useful for when you want to allow the common
            name (presented to a user) to be changed by the user, but still need to be able to cross reference
            items internally.
            </summary>
        </member>
        <member name="M:DigitalProduction.SystemDpm.UniqueId.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.SystemDpm.UniqueId.#ctor(DigitalProduction.SystemDpm.UniqueId)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.SystemDpm.UniqueId.Id">
            <summary>
            Id.
            </summary>
        </member>
        <member name="M:DigitalProduction.SystemDpm.UniqueId.Equals(System.Object)">
            <summary>
            Checks equality to an object.
            </summary>
            <param name="obj">Object to compare to.</param>
        </member>
        <member name="M:DigitalProduction.SystemDpm.UniqueId.Equals(DigitalProduction.SystemDpm.UniqueId)">
            <summary>
            Checks equality to another instance.
            </summary>
            <param name="material">Instance to compare to.</param>
        </member>
        <member name="M:DigitalProduction.SystemDpm.UniqueId.GetHashCode">
            <summary>
            Get a hash code of the object.
            </summary>
        </member>
        <member name="M:DigitalProduction.SystemDpm.UniqueId.op_Equality(DigitalProduction.SystemDpm.UniqueId,DigitalProduction.SystemDpm.UniqueId)">
            <summary>
            Operator overload.
            </summary>
            <param name="leftHandSide">Instance on the left hand side of operator.</param>
            <param name="rightHandSide">Instance on the right hand side of operator.</param>
        </member>
        <member name="M:DigitalProduction.SystemDpm.UniqueId.op_Inequality(DigitalProduction.SystemDpm.UniqueId,DigitalProduction.SystemDpm.UniqueId)">
            <summary>
            Operator overload.
            </summary>
            <param name="leftHandSide">Instance on the left hand side of operator.</param>
            <param name="rightHandSide">Instance on the right hand side of operator.</param>
        </member>
        <member name="M:DigitalProduction.SystemDpm.UniqueId.ToString">
            <summary>
            Override the conversion to a string.
            </summary>
        </member>
        <member name="T:DigitalProduction.Threading.ProgressWorkerDelegate">
            <summary>
            Delegate that has a worker function (to run on a separate thread).
            </summary>
        </member>
        <member name="T:DigitalProduction.Threading.ProgressCleanUpDelegate">
            <summary>
            Delegate that does any required clean up in case of a ProgressDialog getting canceled.
            </summary>
        </member>
        <member name="T:DigitalProduction.Threading.ProgressDialogThreadingHelper">
            <summary>
            A helper class for displaying the progress dialog form.
            </summary>
        </member>
        <member name="M:DigitalProduction.Threading.ProgressDialogThreadingHelper.#ctor(System.Windows.Forms.Form,DigitalProduction.Delegates.DisplayMessageDelegate)">
            <summary>
            Constructor used when passing a ProgressDialogThreadingHelper from a form to a class that is going to do the main work.
            </summary>
            <param name="parentForm">The parent form that this dialog box will show in front of.</param>
            <param name="displayMessageDelegate">A delegate used to display messages in the main form.</param>
        </member>
        <member name="M:DigitalProduction.Threading.ProgressDialogThreadingHelper.#ctor(System.Windows.Forms.Form,DigitalProduction.Threading.ProgressWorkerDelegate,DigitalProduction.Delegates.DisplayMessageDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="parentForm">The parent form that this dialog box will show in front of.</param>
            <param name="workerDelegate">A delegate which is a function that does the main work.</param>
            <param name="displayMessageDelegate">A delegate used to display messages in the main form.</param>
        </member>
        <member name="M:DigitalProduction.Threading.ProgressDialogThreadingHelper.#ctor(System.Windows.Forms.Form,DigitalProduction.Threading.ProgressWorkerDelegate,DigitalProduction.Delegates.DisplayMessageDelegate,DigitalProduction.Threading.ProgressCleanUpDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="parentForm">The parent form that this dialog box will show in front of.</param>
            <param name="workerDelegate">A delegate which is a function that does the main work.</param>
            <param name="displayMessageDelegate">A delegate used to display messages in the main form.</param>
            <param name="cancelCleanUpDelegate">A delegate that is used to clean up resources if the "Cancel" button is pressed while the worker thread is running.</param>
        </member>
        <member name="P:DigitalProduction.Threading.ProgressDialogThreadingHelper.WorkerDelegate">
            <summary>
            Sets or gets the worker delegate.
            
            Example uses:
            	No argument required:
            		progressDialogThreadingHelper.WorkerDelegate = this.SerializeWorker;
            		
            	Argument required:
            		progressDialogThreadingHelper.WorkerDelegate = new ProgressWorkerDelegate(() => base.ReadFileAndSetControls(path));
            </summary>
        </member>
        <member name="P:DigitalProduction.Threading.ProgressDialogThreadingHelper.CancelCleanUpDelegate">
            <summary>
            Sets or gets the cancel clean up delegate.
            </summary>
        </member>
        <member name="P:DigitalProduction.Threading.ProgressDialogThreadingHelper.ProgressDialog">
            <summary>
            Sets or gets the ProgressBarStyle to use in the ProgressDialog.
            </summary>
        </member>
        <member name="M:DigitalProduction.Threading.ProgressDialogThreadingHelper.Run">
             <summary>
             Runs the ProgressDialog and worker thread.
            
             Returns true if successful, false otherwise.
             </summary>
        </member>
        <member name="M:DigitalProduction.Threading.ProgressDialogThreadingHelper.CreateAndStartWorkerThread">
            <summary>
            Create the ProgressDialog and Thread to run the processing on.
            </summary>
        </member>
        <member name="M:DigitalProduction.Threading.ProgressDialogThreadingHelper.WorkerThread">
            <summary>
            Run the translation on a separate thread.
            </summary>
        </member>
        <member name="M:DigitalProduction.Threading.ProgressDialogThreadingHelper.DisplayMessage(System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Display a message using invoke (if required) or normally (if not required).
            </summary>
            <param name="message">Message/text.</param>
            <param name="caption">Caption.</param>
            <param name="icon">MessageBoxIcon to show.</param>
        </member>
        <member name="T:DigitalProduction.XML.Attribute">
            <summary>
            Summary not provided for the class Attribute.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Attribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Attribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Attribute.Name">
            <summary>
            Name of the attribute.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Attribute.Value">
            <summary>
            Value of the attribute.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.AttributeEnumerator">
            <summary>
            Summary not provided for the class AttributeEnumerator.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeEnumerator.#ctor(System.Collections.Generic.List{DigitalProduction.XML.Attribute})">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.AttributeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Get the current entry.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeEnumerator.System#Collections#IEnumerator#MoveNext">
             <summary>
             Move to the next entry.
            
             Returns true is there is another entry, false otherwise.
             </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Reset to the beginning of the entries.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.AttributeList">
            <summary>
            Summary not provided for the class AttributeList.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.AttributeList.Count">
            <summary>
            Number of Attributes.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.Add(DigitalProduction.XML.Attribute)">
            <summary>
            Add an Attribute.
            </summary>
            <param name="attribute">Attribute to add.</param>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.GetAttribute(System.Int32)">
             <summary>
             Get an attribute.
            
             Returns the Attribute at position "number" if it exists, null otherwise.
             </summary>
             <param name="number">Which Attribute to get.</param>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.SerializableSortedList`2">
             <summary>
             Add serialization to a SortedList.
            
             From:
             Original dictionary version from:
             http://stackoverflow.com/questions/495647/serialize-class-containing-dictionary-member
             </summary>
             <typeparam name="KeyType">Dictionary key type.</typeparam>
             <typeparam name="ValueType">Dictionary value type.</typeparam>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableSortedList`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableSortedList`2.GetSchema">
             <summary>
             Get the schema.
            
             Returns null.  This object does not have a schema.
             </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableSortedList`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read XML.
            </summary>
            <param name="reader">XmlReader.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableSortedList`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write XML.
            </summary>
            <param name="writer">XmlWriter.</param>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.SerializableDictionary`2">
             <summary>
             Add serialization to a dictionary.
            
             From:
             http://stackoverflow.com/questions/495647/serialize-class-containing-dictionary-member
             </summary>
             <typeparam name="KeyType">Dictionary key type.</typeparam>
             <typeparam name="ValueType">Dictionary value type.</typeparam>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableDictionary`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableDictionary`2.GetSchema">
             <summary>
             Get the schema.
            
             Returns null.  This object does not have a schema.
             </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read XML.
            </summary>
            <param name="reader">XmlReader.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write XML.
            </summary>
            <param name="writer">XmlWriter.</param>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2">
            <summary>
            Add serialization to a dictionary.
            
            From:
            http://stackoverflow.com/questions/495647/serialize-class-containing-dictionary-member
            </summary>
            <typeparam name="KeyType">Dictionary key type.</typeparam>
            <typeparam name="ValueType">Dictionary value type.</typeparam>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2.Key">
            <summary>Dictionary key.</summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2.Value">
            <summary>Dictionary value.</summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Constructor for initialzing values.
            </summary>
            <param name="key">Dictionary key.</param>
            <param name="value">Dictionary value.</param>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.Serialization">
            <summary>
            Summary not provided for the class Serialization.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.SerializeObject(DigitalProduction.XML.Serialization.SerializationSettings)">
            <summary>
            Serialize an object.
            </summary>
            <param name="settings">SerializationSettings to use for writing.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.SerializeObject(System.Object,System.String)">
            <summary>
            Serialize an object.
            </summary>
            <param name="objectToSerialize">Object to serialize.</param>
            <param name="outputFile">Output file.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.SerializeObjectFullEndElement(DigitalProduction.XML.Serialization.SerializationSettings)">
            <summary>
            Serialize an object using full end element closing tags.
            </summary>
            <param name="settings">SerializationSettings to use for writing.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.SerializeObjectFullEndElement(System.Object,System.String)">
            <summary>
            Serialize an object.
            </summary>
            <param name="objectToSerialize">Object to serialize.</param>
            <param name="outputFile">Output file.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.DeserializeObject``1(System.String)">
            <summary>
            Deserialize an object from a file.
            </summary>
            <typeparam name="T">Type of object to deserialize.</typeparam>
            <param name="file">File to deserialize from.</param>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.SerializationSettings">
            <summary>
            Summary not provided for the class SerializationSettings.
            </summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializationSettings._serializeType">
            <summary>Type of the object to serialize.</summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializationSettings._serializeObject">
            <summary>Object to serialize.</summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializationSettings._outputFile">
            <summary>Name of the output file.</summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializationSettings._xmlSettings">
            <summary>Xml writer settings.</summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializationSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializationSettings.#ctor(System.Object,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="objectToSerialize">Object to serialize.</param>
            <param name="outputFile">Output file.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializationSettings.CreateXmlWriterSettings">
            <summary>
            Creates the default XmlWriterSettings.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Serialization.SerializationSettings.SerializeType">
            <summary>
            Type of the object to serialize.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Serialization.SerializationSettings.SerializeObject">
            <summary>
            Object to serialize.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Serialization.SerializationSettings.OutputFile">
            <summary>
            Name of the output file.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Serialization.SerializationSettings.XmlSettings">
            <summary>
            Xml writer settings.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.XmlTextWriterFullEndElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.XmlTextWriterFullEndElement.#ctor(System.IO.TextWriter)">
            <summary>
            Constructor.
            </summary>
            <param name="textWriter">TextWriter.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.XmlTextWriterFullEndElement.#ctor(System.String,System.Xml.XmlWriterSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="filename">File (path) to write to.</param>
            <param name="settings">Settings to use for writing.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.XmlTextWriterFullEndElement.WriteEndElement">
            <summary>
            Override the writing of the end element to use the full end element (&lt;element&gt;&lt;/element&gt;) instead
            of the short method (&lt;element/&gt;);
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.IXMLPushReader">
            <summary>
            Provides an interface for creating classes that use the XMLTextProcessor to read xml files using a
            push model.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.IXMLPushReader.ReadXML(DigitalProduction.XML.XMLTextProcessor)">
            <summary>
            Read the element that this class corresponds to.
            </summary>
            <param name="xmlprocessor">XMLTextProcessor doing the reading.</param>
        </member>
        <member name="T:DigitalProduction.XML.XMLHandler">
            <summary>
            An XML data handler.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.#ctor(DigitalProduction.XML.HandlerType,DigitalProduction.XML.XMLHandlerFunction)">
            <summary>
            Constructor.
            </summary>
            <param name="type">HandlerType of this handler.</param>
            <param name="elementhandler">Function which handles the element if its found.</param>
        </member>
        <member name="P:DigitalProduction.XML.XMLHandler.ElementName">
            <summary>
            Name of the element this, Handler handles.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLHandler.Type">
            <summary>
            Handler type.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLHandler.HandlerFunction">
            <summary>
            Callback function.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.CompareTo(System.Object)">
             <summary>
             Implements the CompareTo method of the IComparable interface.
            
             Returns a 32-bit signed integer that indicates the relative order of the objects being compared.  The return value
             has these meanings:
             Less than zero: This instance is less than obj.
             Zero: This instance is equal to obj.
             Greater than zero: This instance is greater than obj.
             </summary>
             <param name="obj">An object of type XMLHandler.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.Equals(System.Object)">
            <summary>
            Equivalent function used as a predicate to determine if this FileExtension is equivalent to a second.
            </summary>
            <param name="obj">XMLHandler to compare to.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.GetHashCode">
            <summary>
            Get a hash code.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.XMLHandlerFunction">
            <summary>
            List of handlers for element.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.HandlerType">
            <summary>Type of handler.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Start">
            <summary>First element in enumeration.  Used in loops to provide access to first element without hard coding element name.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Element">
            <summary>Handles a specific element.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Default">
            <summary>If a specific element handler is not specified for the read element, the default handler will be used.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Text">
            <summary>Handles reading text between an element's start and end tags.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.None">
            <summary>Default.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.End">
            <summary>One past the last element in this enumeration list.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Count">
            <summary>The number of enumerations in this enumeration list.</summary>
        </member>
        <member name="T:DigitalProduction.XML.XMLHandlerList">
            <summary>
            A list of handlers.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.AddHandler(System.String,DigitalProduction.XML.XMLHandlerFunction)">
            <summary>
            Add an element handler.
            </summary>
            <param name="elementname">Name of the element to handle.</param>
            <param name="elementhandler">Function which handles the element if it is found.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.AddHandler(DigitalProduction.XML.HandlerType,DigitalProduction.XML.XMLHandlerFunction)">
            <summary>
            Add a handler of a specific type.
            </summary>
            <param name="type">HandlerType added.</param>
            <param name="elementhandler">Function which handles the element if its found.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.AddHandlers(DigitalProduction.XML.XMLHandlerList)">
            <summary>
            Add a list of handlers to this handler list.
            </summary>
            <param name="xmlhandlerlist">XMLHandlerList to add handlers from.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.ProcessElement(System.String,DigitalProduction.XML.XMLTextProcessor,System.Object)">
            <summary>
            See if the element has an associated handler.  If it does call the handler.
            </summary>
            <param name="elementname">Name of the element to look for.</param>
            <param name="xmlprocessor">XML processor that is doing the processing.</param>
            <param name="data">Optional data passed to the handler.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.Process(DigitalProduction.XML.HandlerType,DigitalProduction.XML.XMLTextProcessor,System.Object)">
            <summary>
            See if the element has an associated handler.  If it does call the handler.
            </summary>
            <param name="handler">The HandlerType to look for.</param>
            <param name="xmlprocessor">XML processor that is doing the processing.</param>
            <param name="data">Optional data passed to the handler.</param>
        </member>
        <member name="T:DigitalProduction.XML.XMLTextProcessor">
            <summary>
            Summary description for XMLTextProcessor.
            </summary>
        </member>
        <member name="F:DigitalProduction.XML.XMLTextProcessor._inputStream">
            <summary>Base stream that reads the file.</summary>
        </member>
        <member name="F:DigitalProduction.XML.XMLTextProcessor._xmlReader">
            <summary>XML reader that reads the file.</summary>
        </member>
        <member name="F:DigitalProduction.XML.XMLTextProcessor._topElement">
            <summary>The name of the top element.</summary>
        </member>
        <member name="F:DigitalProduction.XML.XMLTextProcessor._firstCall">
            <summary>Flag to indicate the first call to process.</summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="file">XML file to process.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="file">XML file to process.</param>
            <param name="topElement">Name of the top element in the file.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Open(System.String)">
            <summary>
            Open the input and read up to the first element.
            </summary>
            <param name="file">XML file to process.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Open(System.String,System.String)">
            <summary>
            Open the input and read up to the first element.
            </summary>
            <param name="file">XML file to process.</param>
            <param name="topElement">Name of the top element in the file.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Close">
            <summary>
            Clean up in case of any errors.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLTextProcessor.FileStream">
            <summary>
            The base input stream used.  Read only.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLTextProcessor.XmlTextReader">
            <summary>
            The text reader used.  Read only.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLTextProcessor.IsFileOpen">
            <summary>
            Is the XML file open for reading?
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLTextProcessor.ErrorInformation">
            <summary>
            Returns the information necessary to display a message to the user so that they can figure out what
            went wrong with their input file.  Read only.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Process(DigitalProduction.XML.XMLHandlerList)">
            <summary>
            Process the body of the current element.
            </summary>
            <param name="handlers">
            An instance of XMLHandlerList which has the handlers for elements that this element contains.
            </param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Process(DigitalProduction.XML.XMLHandlerList,System.Object)">
            <summary>
            Process the body of the current element.
            </summary>
            <param name="handlers">
            An instance of XMLHandlerList which has the handlers for elements that this element contains.
            </param>
            <param name="data">Optional data passed to the handler.</param>
            <remarks>
            This function is really just a wrapper around the RunProcess which does the real work.  We just use this function
            to do the error handling.
            </remarks>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.RunProcess(DigitalProduction.XML.XMLHandlerList,System.Object)">
            <summary>
            Process the body of the current element.
            </summary>
            <param name="handlers">
            An instance of XMLHandlerList which has the handlers for elements that this element contains.
            </param>
            <param name="data">Optional data passed to the handler.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.Int32)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.  Returns the attribute
            converted to the indicated data type if possible, otherwise the default value.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultValue">Value to return if nothing is found or an error occurs.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.Double)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.  Returns the attribute
            converted to the indicated data type if possible, otherwise the default value.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultValue">Value to return if nothing is found or an error occurs.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.Boolean)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.  Returns the attribute
            converted to the indicated data type if possible, otherwise the default value.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultValue">Value to return if nothing is found or an error occurs.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.String)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.  Returns the attribute
            converted to the indicated data type if possible, otherwise the default value.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultValue">Value to return if nothing is found or an error occurs.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.Object)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.  Returns the attribute
            converted to the indicated data type if possible, otherwise the default value.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultValue">Value to return if nothing is found or an error occurs.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttributes">
            <summary>
            Extracts all the attributes as a name, value pair and moves to the next element.
            </summary>
            <remarks>
            This function moves to the next elements so if you want to do additional work with the attributes, do it first.
            </remarks>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetElementString(System.String)">
            <summary>
            Read the element data as a string.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetElementString(System.Int32)">
            <summary>
            Read the element data as the indicated type.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetElementString(System.Double)">
            <summary>
            Read the element data as the indicated type.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetElementString(System.Boolean)">
            <summary>
            Read the element data as the indicated type.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.XsltTools">
            <summary>
            
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XsltTools.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XsltTools.Transform(System.String,System.String,System.String)">
            <summary>
            Perform the transformation.
            </summary>
            <param name="inputFile">Input (XML) file.</param>
            <param name="xsltFile">Transformation (XSLT) file.</param>
            <param name="outputFile">Output file.</param>
        </member>
        <member name="T:System.Windows.Forms.MessageBoxManager">
            <summary>
            A class for changing the default text on a message box.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MessageBoxManager.Button">
            <summary>
            The buttons on a message box are numbered from 1, not zero, so we start counting from 1 in this enumeration.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT">
            <summary>
            Defines the message parameters passed to a WH_CALLWNDPROCRET hook procedure,
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.lresult">
            <summary>The return value of the window procedure that processed the message specified by the message value.</summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.lparam">
            <summary>Additional information about the message. The exact meaning depends on the message value.</summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.wparam">
            <summary>Additional information about the message. The exact meaning depends on the message value.</summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.message">
            <summary>The message. </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.hwnd">
            <summary>A handle to the window that processed the message specified by the message value.</summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.OK">
            <summary>
            OK text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Cancel">
            <summary>
            Cancel text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Abort">
            <summary>
            Abort text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Retry">
            <summary>
            Retry text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Ignore">
            <summary>
            Ignore text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Yes">
            <summary>
            Yes text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.No">
            <summary>
            No text.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBoxManager.Register">
            <summary>
            Enables MessageBoxManager functionality
            </summary>
            <remarks>
            MessageBoxManager functionality is enabled on current thread only.
            Each thread that needs MessageBoxManager functionality has to call this method.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.MessageBoxManager.Unregister">
            <summary>
            Disables MessageBoxManager functionality
            </summary>
            <remarks>
            Disables MessageBoxManager functionality on current thread only.
            </remarks>
        </member>
        <member name="T:APS.Format">
            <summary>
            A class for formatting strings.
            </summary>
        </member>
        <member name="M:APS.Format.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:APS.Format.RemoveWhiteSpace(System.String)">
            <summary>
            Removes white spaces from the specified string.
            </summary>
            <param name="input">The input string.</param>
        </member>
        <member name="M:APS.Format.HasWhiteSpace(System.String)">
            <summary>
            Determines whether the specified string has any white space characters.
            </summary>
            <param name="input">The input string.</param>
        </member>
        <member name="M:APS.Format.DateTimeWithPreciseSeconds(System.DateTime)">
            <summary>
            Returns the DateTime as a formatted string with factions of seconds included.
            </summary>
            <param name="dateTime">DateTime to format.</param>
        </member>
        <member name="M:APS.Format.MajorMinorVersionNumber(System.String)">
            <summary>
            Extracts just the major and minor version numbers from a software version number.
            </summary>
            <param name="softwareVersion">A string that is a software version in the form of X.X.XX.XX</param>
            <example>
            If the version number is "1.2.3.4" this will return "1.2" as a string.
            </example>
        </member>
    </members>
</doc>
